:NewDefs


class Pair[A](fst: A, snd: A)
//│ class Pair[A](fst: A, snd: A)



Pair(0, 1) is Pair
//│ Bool
//│ res
//│     = true

Pair(0, 1) is Pair(a, b)
//│ Bool
//│ res
//│     = true

Pair(0, 1) is Pair(0, _)
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.19: 	Pair(0, 1) is Pair(0, _)
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Object`
//│ ║  l.4: 	class Pair[A](fst: A, snd: A)
//│ ║       	              ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.19: 	Pair(0, 1) is Pair(0, _)
//│ ╙──      	                   ^
//│ error | false | true
//│ res
//│     = true

if Pair(0, 1) is Pair(a, b) then true else false
//│ Bool
//│ res
//│     = true


fun foo(x) = x is Pair(a, b)
//│ fun foo: (Object & ~#Pair | Pair[anything]) -> Bool


Pair(0, 1) is Pair(a, b) and a > b
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.43: 	Pair(0, 1) is Pair(a, b) and a > b
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Num`
//│ ║  l.4: 	class Pair[A](fst: A, snd: A)
//│ ║       	              ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.43: 	Pair(0, 1) is Pair(a, b) and a > b
//│ ╙──      	                             ^
//│ error | false | true
//│ res
//│     = false

if Pair(0, 1) is Pair(a, b) then a > b else false
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.57: 	if Pair(0, 1) is Pair(a, b) then a > b else false
//│ ║        	   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Num`
//│ ║  l.4: 	class Pair[A](fst: A, snd: A)
//│ ║       	              ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.57: 	if Pair(0, 1) is Pair(a, b) then a > b else false
//│ ╙──      	                                 ^
//│ error | false | true
//│ res
//│     = false


fun foo(x) = x is Pair(a, b) and a > b
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.72: 	fun foo(x) = x is Pair(a, b) and a > b
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Num`
//│ ║  l.4: 	class Pair[A](fst: A, snd: A)
//│ ║       	              ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.72: 	fun foo(x) = x is Pair(a, b) and a > b
//│ ╙──      	                                 ^
//│ fun foo: (Object & ~#Pair | Pair[anything]) -> (error | false | true)

fun foo(x) = if x is Pair(a, b) then a > b else false
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.84: 	fun foo(x) = if x is Pair(a, b) then a > b else false
//│ ║        	                ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Num`
//│ ║  l.4: 	class Pair[A](fst: A, snd: A)
//│ ║       	              ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.84: 	fun foo(x) = if x is Pair(a, b) then a > b else false
//│ ╙──      	                                     ^
//│ fun foo: (Object & ~#Pair | Pair[anything]) -> (error | false | true)


// TODO proper error
fun foo(x) = x is
  Pair
  Int
//│ ╔══[ERROR] illegal pattern
//│ ║  l.99: 	  Pair
//│ ║        	  ^^^^
//│ ║  l.100: 	  Int
//│ ╙──       	^^^^^
//│ fun foo: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

// TODO proper error
fun foo(x) = x is
  Pair(a, b) and a > b
  Int
//│ ╔══[ERROR] illegal pattern
//│ ║  l.112: 	  Pair(a, b) and a > b
//│ ║         	  ^^^^^^^^^^^^^^^^^^^^
//│ ║  l.113: 	  Int
//│ ╙──       	^^^^^
//│ fun foo: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared

// TODO support `|`
fun foo1(x) = x is Pair(a, b) | Int
fun foo2(x) = x is (Pair(a, b) and a > b) | Int
//│ ╔══[ERROR] Illegal pattern `|`
//│ ║  l.124: 	fun foo1(x) = x is Pair(a, b) | Int
//│ ╙──       	                              ^
//│ ╔══[ERROR] Illegal pattern `|`
//│ ║  l.125: 	fun foo2(x) = x is (Pair(a, b) and a > b) | Int
//│ ╙──       	                                          ^
//│ fun foo1: anything -> error
//│ fun foo2: anything -> error
//│ Code generation encountered an error:
//│   if expression was not desugared



class A(arg: Int)
//│ class A(arg: Int)

// TODO make `is` lower precedence than `=>`
x => (x is A(_))
//│ Object -> Bool
//│ res
//│     = [Function: res]


