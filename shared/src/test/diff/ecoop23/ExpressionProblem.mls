:NewDefs


// * Motivating paper example, demonstrating the expression problem solution


class Add<E>(lhs: E, rhs: E)
class Lit(n: Int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: Int)

fun add11 = Add(Lit(1), Lit(2))
//│ fun add11: Add[Lit]


fun eval(e) =
  if e is
    Lit(n) then n
    Add(l, r) then eval(l) + eval(r)
//│ fun eval: forall 'E. (Add['E] | Lit) -> Int
//│   where
//│     'E <: Add['E] | Lit | ~??E


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: (??E & 'E) -> Int}
//│   fun eval: (Add['E] | Lit) -> Int
//│ }


module TestLang extends EvalBase
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.37: 	module TestLang extends EvalBase
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ║       	                     ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type `??E` does not contain member `Add#E`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.37: 	module TestLang extends EvalBase
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` does not match type `Add[?E0] & {Add#E :> ?E1 <: ?E0} | Lit`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ║       	                     ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.37: 	module TestLang extends EvalBase
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Object`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ║       	                     ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.27: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.28: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.27: 	    if e is
//│ ╙──      	       ^
//│ module TestLang {
//│   fun eval: (Add[anything] | Lit) -> Int
//│ }

TestLang.eval
//│ (Add[anything] | Lit) -> Int
//│ res
//│     = [Function: eval]

TestLang.eval(add11)
//│ Int
//│ res
//│     = 3


mixin EvalNothing {
  fun eval(e) = e : nothing
}
mixin EvalAddLit {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
    else super.eval(e)
}
module TestLang extends EvalNothing, EvalAddLit
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.100: 	module TestLang extends EvalNothing, EvalAddLit
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Add & ~#Lit` does not match type `nothing`
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.91: 	  fun eval(e) = e : nothing
//│ ║        	                    ^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.98: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `Lit & ??E` does not contain member `Add#E`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.100: 	module TestLang extends EvalNothing, EvalAddLit
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` does not match type `Add[?E0] & {Add#E :> ?E1 <: ?E0} | Lit | ?a & ~#Add & ~#Lit`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ║       	                     ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.95: 	    if e is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.100: 	module TestLang extends EvalNothing, EvalAddLit
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Object`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ║       	                     ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.95: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.96: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.97: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.98: 	    else super.eval(e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.95: 	    if e is
//│ ╙──      	       ^
//│ mixin EvalNothing() {
//│   fun eval: nothing -> nothing
//│ }
//│ mixin EvalAddLit() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: (??E & 'E) -> Int}
//│   fun eval: (Add['E] | Lit | Object & 'a & ~#Add & ~#Lit) -> (Int | 'b)
//│ }
//│ module TestLang {
//│   fun eval: (Add[anything] | Lit) -> Int
//│ }

TestLang.eval
//│ (Add[anything] | Lit) -> Int
//│ res
//│     = [Function: eval]

TestLang.eval(add11)
//│ Int
//│ res
//│     = 3


class Neg<A>(expr: A)
//│ class Neg[A](expr: A)

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: Add[Lit | Neg[Add[Lit]]]
//│ add2negadd11
//│              = Add {}


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: (??A & 'A) -> Int}
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> (Int | 'b)
//│ }


module TestLang extends EvalBase, EvalNeg
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.185: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#E`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.185: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.185: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.27: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.28: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.185: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.164: 	class Neg<A>(expr: A)
//│ ║         	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.175: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.176: 	    else super.eval(e)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.175: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ╙──       	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.185: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??E` does not contain member `Add#E`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.185: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.185: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.27: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.28: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.185: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Object`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ║       	                     ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.175: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.176: 	    else super.eval(e)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.175: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ╙──       	       ^
//│ module TestLang {
//│   fun eval: (Add[anything] | Lit | Neg[anything]) -> Int
//│ }

TestLang.eval
//│ (Add[anything] | Lit | Neg[anything]) -> Int
//│ res
//│     = [Function: eval]


TestLang.eval(add11)
//│ Int
//│ res
//│     = 3

TestLang.eval(Neg(add11))
//│ Int
//│ res
//│     = -3

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ Int
//│ res
//│     = 1

TestLang.eval(Neg(Neg(add11)))
//│ Int
//│ res
//│     = 3


TestLang.eval(add2negadd11)
//│ Int
//│ res
//│     = -1

// add11

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ Int
//│ res
//│     = -1


mixin EvalNegNeg_0 {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
    // * Note: the above is equivalent to:
    // if e is Neg(f) then
    //   if f is Neg(d) then this.eval(d)
    //   else super.eval(e)
    // else super.eval(e)
}
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.334: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.335: 	    else super.eval(e)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Object`
//│ ║  l.164: 	class Neg<A>(expr: A)
//│ ║         	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.334: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║         	                ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.335: 	    else super.eval(e)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.334: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ╙──       	                ^^^^^^
//│ mixin EvalNegNeg_0() {
//│   super: {eval: (Neg[??A & 'A] | 'a) -> 'b}
//│   this: {eval: (??A0 & ??A1) -> 'b}
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> (error | 'b)
//│ }

// * Concise alternative, usign syntax sugar:
mixin EvalNegNeg {
  fun eval(override Neg(Neg(d))) = this.eval(d)
}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.366: 	  fun eval(override Neg(Neg(d))) = this.eval(d)
//│ ║         	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Object`
//│ ║  l.164: 	class Neg<A>(expr: A)
//│ ╙──       	             ^^^^
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg[??A & 'A] | 'a) -> 'b}
//│   this: {eval: (??A0 & ??A1) -> 'b}
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> (error | 'b)
//│ }

module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#E`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.27: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.28: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.164: 	class Neg<A>(expr: A)
//│ ║         	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.366: 	  fun eval(override Neg(Neg(d))) = this.eval(d)
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#E`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.27: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.28: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.164: 	class Neg<A>(expr: A)
//│ ║         	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.366: 	  fun eval(override Neg(Neg(d))) = this.eval(d)
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??E` does not contain member `Add#E`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.27: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.27: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.28: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.29: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.176: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.380: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Object`
//│ ║  l.7: 	class Add<E>(lhs: E, rhs: E)
//│ ║       	                     ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.366: 	  fun eval(override Neg(Neg(d))) = this.eval(d)
//│ ╙──       	      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ module TestLang {
//│   fun eval: (Add[anything] | Lit | Neg[anything]) -> (Int | error)
//│ }

fun mk(n) = if n is
  0 then Lit(0)
  1 then Neg(mk(n))
  _ then Add(mk(n), mk(n))
//│ fun mk: forall 'E. Object -> 'E
//│   where
//│     'E :> Add['E] | Lit | Neg['E]

TestLang.eval
//│ (Add[anything] | Lit | Neg[anything]) -> (Int | error)
//│ res
//│     = [Function: eval]

TestLang.eval(mk(0))
//│ Int | error
//│ res
//│     = 0


