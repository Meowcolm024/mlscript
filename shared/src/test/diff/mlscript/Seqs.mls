
class Seq[A]: { size: int }
//│ Defined class Seq

class ListBase[A]: Seq[A]
//│ Defined class ListBase

class Nil: ListBase[nothing] & {}
class Cons[A]: ListBase[A] & { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons
//│ Defined type List

:e
Nil{}
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.16: 	Nil{}
//│ ║        	^^^^^
//│ ╟── expression of type `anything` does not match type `listBase`
//│ ║  l.16: 	Nil{}
//│ ║        	   ^^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.8: 	class Nil: ListBase[nothing] & {}
//│ ╙──     	           ^^^^^^^^^^^^^^^^^
//│ res: (nil & ListBase[nothing]) | error

def Nil = Nil (ListBase (Seq { size = 0 }))
//│ Nil: nil & ListBase[nothing]

// FIXME type of head...
def Cons head tail =
  Cons (ListBase (Seq { size = succ tail.size }) with { head; tail })
//│ Cons: anything -> {size: int} -> cons & (ListBase[nothing] & {head: nothing, tail: List[nothing]})

Nil: ListBase[anything]
//│ res: ListBase[anything]

