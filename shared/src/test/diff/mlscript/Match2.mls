
class Test: { value: int }
//│ Defined class Test

def foo x = case x of
  { Test -> x.value
  | _ -> 1
  }
//│ foo: ((Test with {value: 'a}) | ~Test) -> (1 | 'a)

// Q: why type of `value` widened?
def t = Test { value = 0 }
//│ t: Test & {value: 0}

foo Test
//│ res: 1

foo t
//│ res: 0 | 1


class Toast: { name: string }
//│ Defined class Toast

def bar x = case x of
  { Test -> x.value
  | Toast -> x.name
  }
//│ bar: ((Test with {value: 'a}) | (Toast with {name: 'a})) -> 'a

:e
bar Test
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.32: 	bar Test
//│ ║        	^^^^^^^^
//│ ╟── expression of type `{value: ?value} -> (Test & {value: ?value})` does not match type `Test & ?a | Toast & ?b`
//│ ║  l.32: 	bar Test
//│ ║        	    ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.25: 	def bar x = case x of
//│ ║        	                 ^
//│ ╟── Note: Type class constructor is defined at: 
//│ ║  l.2: 	class Test: { value: int }
//│ ╙──     	      ^^^^
//│ res: error

:e
bar "ops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.48: 	bar "ops"
//│ ║        	^^^^^^^^^
//│ ╟── expression of type `"ops"` does not match type `Test & ?a | Toast & ?b`
//│ ║  l.48: 	bar "ops"
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.25: 	def bar x = case x of
//│ ╙──      	                 ^
//│ res: error


def baz x = case x of
  { Test -> x
  | Toast -> x
  }
//│ baz: (Test & 'a | Toast & 'a) -> 'a

:e
baz "oops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.68: 	baz "oops"
//│ ║        	^^^^^^^^^^
//│ ╟── expression of type `"oops"` does not match type `Test & ?a | Toast & ?b`
//│ ║  l.68: 	baz "oops"
//│ ║        	    ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.61: 	def baz x = case x of
//│ ╙──      	                 ^
//│ res: error



def test3 x = case x of
  { 1 -> true
  | true -> true
  | _ -> false
  }
//│ test3: (1 | true | ~1 & ~true) -> bool


def test3 x = case x of
  { 1 -> x
  | true -> true
  | _ -> false
  }
//│ test3: (1 & 'a | true | ~1 & ~true) -> (false | true | 'a)


