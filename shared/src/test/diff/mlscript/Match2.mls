
class Test: { value: int }
//│ Defined class Test

def foo x = case x of
  { Test -> x.value
  | _ -> 1
  }
//│ foo: ((test & {value: 'a}) | (anything & ~test)) -> 'a | 1

// Q: why type of `value` widened?
def t = Test { value = 0 }
//│ t: test & {value: int}

foo Test
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Program reached and unexpected state.
//│ 	at: mlscript.utils.package$.lastWords(package.scala:135)
//│ 	at: mlscript.utils.package$.die(package.scala:134)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$4(ConstraintSolver.scala:182)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:107)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:105)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$4(ConstraintSolver.scala:156)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)

foo t
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Program reached and unexpected state.
//│ 	at: mlscript.utils.package$.lastWords(package.scala:135)
//│ 	at: mlscript.utils.package$.die(package.scala:134)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$4(ConstraintSolver.scala:182)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:107)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:105)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$4(ConstraintSolver.scala:156)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)


class Toast: { name: string }
//│ Defined class Toast

def bar x = case x of
  { Test -> x.value
  | Toast -> x.name
  }
//│ bar: ((test & {value: 'a}) | ((toast & {name: 'b}) & ~test)) -> 'a | 'b

:e
bar Test
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.42: 	bar Test
//│ ║        	^^^^^^^^
//│ ╟── expression of type `{value: int} -> test & {value: int}` does not match type `(test & ?a & {value: ?b}) | ((toast & ?c & {name: ?d}) & ~test)`
//│ ║  l.42: 	bar Test
//│ ║        	    ^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.35: 	def bar x = case x of
//│ ╙──      	                 ^
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Program reached and unexpected state.
//│ 	at: mlscript.utils.package$.lastWords(package.scala:135)
//│ 	at: mlscript.utils.package$.die(package.scala:134)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$4(ConstraintSolver.scala:182)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:107)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:105)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$4(ConstraintSolver.scala:156)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)

:e
bar "ops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.65: 	bar "ops"
//│ ║        	^^^^^^^^^
//│ ╟── expression of type `"ops"` does not match type `(test & ?a & {value: ?b}) | ((toast & ?c & {name: ?d}) & ~test)`
//│ ║  l.65: 	bar "ops"
//│ ║        	    ^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.35: 	def bar x = case x of
//│ ╙──      	                 ^
//│ /!!!\ Uncaught error: java.lang.Exception: Internal Error: Program reached and unexpected state.
//│ 	at: mlscript.utils.package$.lastWords(package.scala:135)
//│ 	at: mlscript.utils.package$.die(package.scala:134)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$4(ConstraintSolver.scala:182)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)
//│ 	at: mlscript.ConstraintSolver.annoyingImpl$1(ConstraintSolver.scala:107)
//│ 	at: mlscript.ConstraintSolver.annoying$1(ConstraintSolver.scala:105)
//│ 	at: mlscript.ConstraintSolver.$anonfun$constrain$4(ConstraintSolver.scala:156)
//│ 	at: scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
//│ 	at: mlscript.TyperHelpers.trace(TyperHelpers.scala:17)


def baz x = case x of
  { Test -> x
  | Toast -> x
  }
//│ baz: ((test & 'a) | ((toast & 'b) & ~test)) -> 'a | 'b

:e
baz "oops"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.95: 	baz "oops"
//│ ║        	^^^^^^^^^^
//│ ╟── expression of type `"oops"` does not match type `(test & ?a) | ((toast & ?b) & ~test)`
//│ ║  l.95: 	baz "oops"
//│ ║        	    ^^^^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.88: 	def baz x = case x of
//│ ╙──      	                 ^
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: head of empty String
//│ 	at: scala.collection.StringOps$.head$extension(StringOps.scala:1124)
//│ 	at: mlscript.TypeSimplifier.$anonfun$expandCompactType$7(TypeSimplifier.scala:348)
//│ 	at: scala.collection.Iterator$$anon$9.next(Iterator.scala:575)
//│ 	at: scala.collection.immutable.List.prependedAll(List.scala:153)
//│ 	at: scala.collection.IterableOnceOps.toList(IterableOnce.scala:1251)
//│ 	at: scala.collection.IterableOnceOps.toList$(IterableOnce.scala:1251)
//│ 	at: scala.collection.AbstractIterator.toList(Iterator.scala:1288)
//│ 	at: mlscript.TypeSimplifier.$anonfun$expandCompactType$3(TypeSimplifier.scala:344)
//│ 	at: scala.util.ChainingOps$.pipe$extension(ChainingOps.scala:64)
//│ 	at: mlscript.TypeSimplifier.go$3(TypeSimplifier.scala:338)

