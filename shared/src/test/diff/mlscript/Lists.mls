
class Nil: {}
class Cons[A]: { head: A; tail: List[A] }
type List[A] = Nil | Cons[A]
//│ Defined class Nil
//│ Defined class Cons
//│ Defined type List

def originalCons = Cons
//│ originalCons: {head: 'a, tail: List['a]} -> cons & {head: 'a, tail: List['a]}

def Nil = Nil {}
//│ Nil: nil

def Cons head tail = Cons { head; tail }
//│ Cons: 'a -> List['a] -> cons & {head: 'a, tail: List['a]}


Cons 2
//│ res: List['a] -> cons & {head: 'a | 2, tail: List['a | 2]}

Cons 2 Nil
//│ res: cons & {head: 2, tail: List[2]}

// FIXME List[1]...
Cons 1 res
//│ res: cons & {head: 1, tail: List[1]}

res.tail
//│ res: List[1]

Cons 1 (Cons 2 Nil)
//│ res: cons & {head: 1, tail: List[1]}

res.tail
//│ res: List[1]

:e // Q: why the duplicated error?
res.tail
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.39: 	res.tail
//│ ║        	^^^
//│ ╟── expression of type `nil` does not have field 'tail'
//│ ║  l.4: 	type List[A] = Nil | Cons[A]
//│ ║       	               ^^^
//│ ╟── but it flows into reference with expected type `{tail: ?a}`
//│ ║  l.39: 	res.tail
//│ ╙──      	^^^
//│ res: List[1] | error

:e // Q: why the duplicated error?
res.tail.head
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.52: 	res.tail.head
//│ ║        	^^^
//│ ╟── expression of type `nil` does not have field 'tail'
//│ ║  l.4: 	type List[A] = Nil | Cons[A]
//│ ║       	               ^^^
//│ ╟── but it flows into reference with expected type `{tail: ?a}`
//│ ║  l.52: 	res.tail.head
//│ ╙──      	^^^
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.52: 	res.tail.head
//│ ║        	^^^
//│ ╟── expression of type `nil` does not have field 'head'
//│ ║  l.4: 	type List[A] = Nil | Cons[A]
//│ ║       	               ^^^
//│ ╟── but it flows into field selection with expected type `{head: ?a}`
//│ ║  l.52: 	res.tail.head
//│ ╙──      	^^^
//│ res: 1 | error



// More precise Cons?
def Cons head tail = Cons { head; tail } with { head; tail }
//│ Cons: 'a -> 'b -> ((List['c] -> cons & {head: 'c | {head: 'a, tail: 'b}, tail: List['c | {head: 'a, tail: 'b}]})\head\tail & {head: 'a}\tail) & {tail: 'b}


Cons 2
//│ res: 'a -> ((List['b] -> cons & {head: 'b | {head: 2, tail: 'a}, tail: List['b | {head: 2, tail: 'a}]})\head\tail & {head: 2}\tail) & {tail: 'a}

Cons 2 Nil
//│ res: ((List['a] -> cons & {head: 'a | {head: 2, tail: nil}, tail: List['a | {head: 2, tail: nil}]})\head\tail & {head: 2}\tail) & {tail: nil}

// FIXME
res.head
//│ res: nothing

Cons 1 res
//│ res: ((List['a] -> cons & {head: 'a | {head: 1, tail: nothing}, tail: List['a | {head: 1, tail: nothing}]})\head\tail & {head: 1}\tail) & {tail: nothing}

Cons 1 (Cons 2 Nil)
//│ res: ((List['a] -> cons & {head: 'a | {head: 1, tail: ((List['b] -> cons & {head: 'b | {head: 2, tail: nil}, tail: List['b | {head: 2, tail: nil}]})\head\tail & {head: 2}\tail) & {tail: nil}}, tail: List['a | {head: 1, tail: ((List['b] -> cons & {head: 'b | {head: 2, tail: nil}, tail: List['b | {head: 2, tail: nil}]})\head\tail & {head: 2}\tail) & {tail: nil}}]})\head\tail & {head: 1}\tail) & {tail: ((List['b] -> cons & {head: 'b | {head: 2, tail: nil}, tail: List['b | {head: 2, tail: nil}]})\head\tail & {head: 2}\tail) & {tail: nil}}

// FIXME
res.head
//│ res: nothing


def Cons head = originalCons { head=0; tail=Nil } with { head }
//│ Cons: 'a -> (cons & {head: 0, tail: List[0]})\head & {head: 'a}

Cons 1
//│ res: (cons & {head: 0, tail: List[0]})\head & {head: 1}

// FIXME
res.head
//│ res: nothing

def c = Cons 1
//│ c: (cons & {head: 0, tail: List[0]})\head & {head: 1}

c.head
//│ res: nothing

