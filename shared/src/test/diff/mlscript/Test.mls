
class Person: { name: string; age: int }
def Person = fun n -> fun a -> Person { name = n; age = a }
//│ Defined class Person
//│ Person: string -> int -> person & {age: int, name: string}

class Animal: {}
//│ Defined class Animal

def test = fun x -> case x of
  { Person -> x.age
  | Animal -> 0
  }
//│ test: ((person & {age: 'a}) | ((animal & anything) & ~person)) -> 'a | 0

// TODO simplify type to : test: Person & {age: 'a} | Animal -> 'a | 0

// TOOD support tyvars
:pe
test: Person & {age: 'a} | Animal -> 'a | 0
//│ /!\ Parse error: Expected end-of-input:1:41, found "| 0;" at l.20:41: test: Person & {age: 'a} | Animal -> 'a | 0

test: (Person & {age: int} | Animal) -> int
//│ res: ((Person & {age: int}) | Animal) -> int

def a = Animal{}
//│ a: animal

a: {}
//│ res: anything

def p = Person "Bob" 42
//│ p: person & {age: int, name: string}

p: { age: int }
//│ res: {age: int}

test a
//│ res: nothing | 0

test p
//│ res: int | 0

1: int
//│ res: int

