class Left[A]: { value: A }
def Left value = Left{ value }
//│ Defined class Left
//│ Left: 'a -> left & {value: 'a}

class Right[A]: { value: A }
def Right value = Right{ value }
//│ Defined class Right
//│ Right: 'a -> right & {value: 'a}

def testVal = if true then Left 1 else Right 2
//│ testVal: (left & {value: 1}) | (right & {value: 2})

testVal.value
//│ res: 2 | 1

def res = case testVal of
  { Left -> testVal.value
  | Right -> 1
  }
//│ res: 1 | 1

// TODO support:
res: 1
case res of { 1 -> "ok" }
//│ /!\ Parse error: Expected end-of-input:1:4, found ": 1;case r" at l.24:4: res: 1

// TODO simplify this monster:
def res = case testVal of
  { Left -> testVal
  | Right -> 1
  }
//│ res: ((right & {value: 2}) & ~((right & (({value: 2} & right) & ~left) | (({value: 1} & left) & ~left)) & ~left)) | ((left & {value: 1}) & ~((right & (({value: 2} & right) & ~left) | (({value: 1} & left) & ~left)) & ~left)) | 1

