
trait T1
trait T2
//│ Defined trait T1
//│ Defined trait T2

r = if true then T1 ((1,2,3)) else T2 ((3,4,5,4))
//│ r: (1, 2, 3,) & t1 | (3, 4, 5, 4,) & t2
//│  = [ 1, 2, 3 ]

// FIXME
case r of { T1 -> r | _ -> 0 }
//│ res: (1, 2, 3,) & t1 | (3, 4, 5, 4,) & t1 & t2 | 0
//│ Runtime error:
//│   ReferenceError: T1 is not defined

// FIXME
case r of { T1 -> r | T2 -> r }
//│ res: (1, 2, 3,) & t1 | (3, 4, 5, 4,) & t1 & t2 | (3, 4, 5, 4,) & t2 & ~t1 | (3, 4, 5, 4,) & t2 & ~'a | 'a
//│ Runtime error:
//│   ReferenceError: T1 is not defined


x = 1
//│ x: 1
//│  = 1

t2 = T2 x
//│ t2: 1 & t2
//│   = 1

t1 = T1 t2
//│ t1: 1 & t1 & t2
//│   = 1

t1: T1
t1: T2
//│ res: t1
//│    = 1
//│ res: t2
//│    = 1


class C1[A]: { a: A }
class C2[A]: { a: A }
//│ Defined class C1
//│ Defined class C2

r = if true then C1 {a=x} else C2 {a=(3,4,5,4)}
//│ r: (C1['A .. 1 | 'A] with {a: 1}) | (C2['A0 .. (3, 4, 5, 4,) | 'A0] with {a: (3, 4, 5, 4,)})
//│  = C1 { a: 1 }

case r of { C1 -> r.a | _ -> 0 }
//│ res: 0 | 1
//│    = 1

def x1: (int, bool)
def x2: (string, unit)
//│ x1: (int, bool,)
//│ x2: (string, unit,)

:re
if true then x1 else x2
//│ res: (int | string, bool | unit,)
//│ Runtime error:
//│   ReferenceError: x1 is not defined



def f: ((1,2) | (3,4)) -> anything
//│ f: (1 | 3, 2 | 4,) -> anything

fun (x, y) -> f ((x,y))
//│ res: (1 | 3, 2 | 4,) -> anything
//│    = [Function: res]

def f: ((1,2)&t1 | (3,4)&t2) -> anything
//│ f: ((1, 2,) & t1 | (3, 4,) & t2) -> anything

:e
f ((true,false))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.81: 	f ((true,false))
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── expression of type `true` does not match type `1 | 3`
//│ ║  l.81: 	f ((true,false))
//│ ║        	    ^^^^
//│ ╟── but it flows into tuple literal with expected type `(1, 2,) & t1 | (3, 4,) & t2`
//│ ║  l.81: 	f ((true,false))
//│ ║        	    ^^^^^^^^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.77: 	def f: ((1,2)&t1 | (3,4)&t2) -> anything
//│ ╙──      	              ^^^^^^^^^^^^^
//│ res: error
//│ Runtime error:
//│   ReferenceError: f is not defined

:e
fun (x, y) -> f ((x,y))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.99: 	fun (x, y) -> f ((x,y))
//│ ║        	              ^^^^^^^
//│ ╟── expression of type `(?a, ?b,)` does not match type `(1, 2,) & t1 | (3, 4,) & t2`
//│ ║  l.99: 	fun (x, y) -> f ((x,y))
//│ ║        	                  ^^^
//│ ╟── Note: constraint arises from union type:
//│ ║  l.77: 	def f: ((1,2)&t1 | (3,4)&t2) -> anything
//│ ╙──      	              ^^^^^^^^^^^^^
//│ res: (nothing, nothing,) -> anything
//│    = [Function: res]

fun (x, y) -> f (T1 ((x,y)))
//│ res: (1, 2,) -> anything
//│    = [Function: res]

fun (x, y) -> f (T2 ((x,y)))
//│ res: (3, 4,) -> anything
//│    = [Function: res]

:ns
res = if true then (1,2, "hello") else (true, 3)
//│ res: 'a | (1, 2, "hello",) | (true, 3,)
//│    = [ 1, 2, 'hello' ]

:d
res._1
//│ 0. Typing term res._1
//│ | 0. Typing term res
//│ | 0. : [α0]
//│ | CONSTRAIN [[α0]] <! {_1: α1}
//│ |   where α0 :> [(1<int,number>, 2<int,number>, "hello"<string>)] | [([true<bool>], 3<int,number>)]
//│ | C [[α0]] <! {_1: α1}
//│ | | C [α0] <! {_1: α1}
//│ | | | C α0 <! {_1: α1}
//│ | | | | C [(1<int,number>, 2<int,number>, "hello"<string>)] <! {_1: α1}
//│ | | | | | C (1<int,number>, 2<int,number>, "hello"<string>) <! {_1: α1}
//│ | | | | | | CONSTRAINT FAILURE: (1<int,number>, 2<int,number>, "hello"<string>) <: {_1: α1}
//│ | | | | | | CTX: List(List((1<int,number>, 2<int,number>, "hello"<string>) <: {_1: α1} [‹tuple literal:Loc(20,32,Yicong:+121)›] [‹field selection:Loc(0,6,Yicong:+126)›], [(1<int,number>, 2<int,number>, "hello"<string>)] <: {_1: α1} [‹argument:Loc(20,32,Yicong:+121)›] [‹field selection:Loc(0,6,Yicong:+126)›], α0 <: {_1: α1} [‹application:Loc(9,47,Yicong:+121)›] [‹field selection:Loc(0,6,Yicong:+126)›], [α0] <: {_1: α1} [‹reference:Loc(0,3,Yicong:+126)›] [‹field selection:Loc(0,6,Yicong:+126)›], [[α0]] <: {_1: α1} [‹receiver:Loc(0,3,Yicong:+126)›] [‹field selection:Loc(0,6,Yicong:+126)›]))
//│ | | | | | | CONSTRAIN error<> <! α1
//│ | | | | | |   where 
//│ | | | | | | C error<> <! α1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.126: 	res._1
//│ ║         	^^^^^^
//│ ╟── expression of type `(1, 2, "hello",)` does not have field '_1'
//│ ║  l.121: 	res = if true then (1,2, "hello") else (true, 3)
//│ ║         	                    ^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{_1: ?a}`
//│ ║  l.126: 	res._1
//│ ╙──       	^^^
//│ | | | | C [([true<bool>], 3<int,number>)] <! {_1: α1}
//│ | | | | | C ([true<bool>], 3<int,number>) <! {_1: α1}
//│ | | | | | | CONSTRAINT FAILURE: ([true<bool>], 3<int,number>) <: {_1: α1}
//│ | | | | | | CTX: List(List(([true<bool>], 3<int,number>) <: {_1: α1} [‹tuple literal:Loc(40,47,Yicong:+121)›] [‹field selection:Loc(0,6,Yicong:+126)›], [([true<bool>], 3<int,number>)] <: {_1: α1} [‹argument:Loc(40,47,Yicong:+121)›] [‹field selection:Loc(0,6,Yicong:+126)›], α0 <: {_1: α1} [‹application:Loc(9,47,Yicong:+121)›] [‹field selection:Loc(0,6,Yicong:+126)›], [α0] <: {_1: α1} [‹reference:Loc(0,3,Yicong:+126)›] [‹field selection:Loc(0,6,Yicong:+126)›], [[α0]] <: {_1: α1} [‹receiver:Loc(0,3,Yicong:+126)›] [‹field selection:Loc(0,6,Yicong:+126)›]))
//│ 0. : α1
//│ Typed as: α1
//│  where: α1 :> error<>
//│ ty[true] α1
//│ | Consider α1 List(error<>) List()
//│ -> DNF(α1 | error<>{})
//│ DNF[true] DNF(α1 | error<>{})
//│ | Renewed α1 ~> α3
//│ ~> (error<> | α3)
//│ Canon: (error<> | α3)
//│  where: 
//│ [occs] LinkedHashMap((true,α3) -> HashSet(α3, error<>))
//│ [vars] TreeSet(α3)
//│ [bounds] 
//│ [rec] HashSet()
//│ [!] α3
//│ [sub] α3 -> None
//│ Type after simplification: error<>
//│  where: 
//│ ty[true] error<>
//│ -> DNF(error<>{})
//│ DNF[true] DNF(error<>{})
//│ ~> error<>
//│ Recanon: error<>
//│  where: 
//│ [occs] LinkedHashMap()
//│ [vars] TreeSet()
//│ [bounds] 
//│ [rec] HashSet()
//│ [sub] 
//│ Resimplified: error<>
//│  where: 
//│ Recons: error<>
//│ res: error
//│    = undefined

res = if true then (1, 2, 3, 'hello') else (true, 4, false)
hhh = if false then (45,345, 'bye', true) else (false, 3)
t = if false then res else hhh
g = if true then (6,6,6) else res
//│ res: Array["hello" | 1 | 2 | 3 | 4 | bool]
//│    = [ 1, 2, 3, 'hello' ]
//│ hhh: Array["bye" | 345 | 3 | 45 | bool]
//│    = [ false, 3 ]
//│ t: Array["bye" | "hello" | 1 | 2 | 345 | 3 | 45 | 4 | bool]
//│  = [ false, 3 ]
//│ g: Array["hello" | 1 | 2 | 3 | 4 | 6 | bool]
//│  = [ 6, 6, 6 ]

def f: (int, bool) -> int
def g: (bool, string, int) -> int
// def h x = (f(x), g(x))
//│ f: (int, bool,) -> int
//│ g: (bool, string, int,) -> int

:d
p1 = if true then (1, 2, 2) else (true, false)
//│ 1. Typing term (((if true) (1, 2, 2,)) (true, false,))
//│ | 1. Typing term ((if true) (1, 2, 2,))
//│ | | 1. Typing term (if true)
//│ | | | 1. Typing term if
//│ | | | 1. : [(bool<> -> (α0' -> (α0' -> α0')))]
//│ | | | 1. Typing term true
//│ | | | 1. : [true<bool>]
//│ | | | CONSTRAIN [[(bool<> -> (α0' -> (α0' -> α0')))]] <! ([[true<bool>]] -> α1')
//│ | | |   where 
//│ | | | C [[(bool<> -> (α0' -> (α0' -> α0')))]] <! ([[true<bool>]] -> α1')
//│ | | | | C [(bool<> -> (α0' -> (α0' -> α0')))] <! ([[true<bool>]] -> α1')
//│ | | | | | C (bool<> -> (α0' -> (α0' -> α0'))) <! ([[true<bool>]] -> α1')
//│ | | | | | | C [[true<bool>]] <! bool<>
//│ | | | | | | | C [true<bool>] <! bool<>
//│ | | | | | | | | C true<bool> <! bool<>
//│ | | | | | | C (α0' -> (α0' -> α0')) <! α1'
//│ | | 1. : α1'
//│ | | 1. Typing term (1, 2, 2,)
//│ | | | 1. Typing term 1
//│ | | | 1. : 1<int,number>
//│ | | | 1. Typing term 2
//│ | | | 1. : 2<int,number>
//│ | | | 1. Typing term 2
//│ | | | 1. : 2<int,number>
//│ | | 1. : (1<int,number>, 2<int,number>, 2<int,number>)
//│ | | CONSTRAIN [α1'] <! ([(1<int,number>, 2<int,number>, 2<int,number>)] -> α2')
//│ | |   where α1' :> (α0' -> (α0' -> α0'))
//│ | | C [α1'] <! ([(1<int,number>, 2<int,number>, 2<int,number>)] -> α2')
//│ | | | C α1' <! ([(1<int,number>, 2<int,number>, 2<int,number>)] -> α2')
//│ | | | | C (α0' -> (α0' -> α0')) <! ([(1<int,number>, 2<int,number>, 2<int,number>)] -> α2')
//│ | | | | | C [(1<int,number>, 2<int,number>, 2<int,number>)] <! α0'
//│ | | | | | C (α0' -> α0') <! α2'
//│ | 1. : α2'
//│ | 1. Typing term (true, false,)
//│ | | 1. Typing term true
//│ | | 1. : [true<bool>]
//│ | | 1. Typing term false
//│ | | 1. : [false<bool>]
//│ | 1. : ([true<bool>], [false<bool>])
//│ | CONSTRAIN [α2'] <! ([([true<bool>], [false<bool>])] -> α3')
//│ |   where α0' :> [(1<int,number>, 2<int,number>, 2<int,number>)], α2' :> (α0' -> α0')
//│ | C [α2'] <! ([([true<bool>], [false<bool>])] -> α3')
//│ | | C α2' <! ([([true<bool>], [false<bool>])] -> α3')
//│ | | | C (α0' -> α0') <! ([([true<bool>], [false<bool>])] -> α3')
//│ | | | | C [([true<bool>], [false<bool>])] <! α0'
//│ | | | | C α0' <! α3'
//│ | | | | | C [([true<bool>], [false<bool>])] <! α3'
//│ | | | | | C [(1<int,number>, 2<int,number>, 2<int,number>)] <! α3'
//│ 1. : α3'
//│ Typed as: α4
//│  where: α4 :> [(1<int,number>, 2<int,number>, 2<int,number>)] | [([true<bool>], [false<bool>])]
//│ ty[true] α4
//│ | Consider α4 List([(1<int,number>, 2<int,number>, 2<int,number>)], [([true<bool>], [false<bool>])]) List()
//│ -> DNF(α4 | Array[((((1<int,number> | 2<int,number>) | 2<int,number>) | [true<bool>]) | [false<bool>])]{})
//│ DNF[true] DNF(α4 | Array[((((1<int,number> | 2<int,number>) | 2<int,number>) | [true<bool>]) | [false<bool>])]{})
//│ | Renewed α4 ~> α5
//│ | ty[true] ((((1<int,number> | 2<int,number>) | 2<int,number>) | [true<bool>]) | [false<bool>])
//│ | -> DNF(1<int,number>{} | 2<int,number>{} | true<bool>{} | false<bool>{})
//│ | DNF[true] DNF(1<int,number>{} | 2<int,number>{} | true<bool>{} | false<bool>{})
//│ | ~> (1<int,number> | (2<int,number> | (false<bool> | true<bool>)))
//│ ~> (Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))] | α5)
//│ Canon: (Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))] | α5)
//│  where: 
//│ [occs] LinkedHashMap((true,α5) -> HashSet(α5, Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))]))
//│ [vars] TreeSet(α5)
//│ [bounds] 
//│ [rec] HashSet()
//│ [!] α5
//│ [sub] α5 -> None
//│ Type after simplification: Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))]
//│  where: 
//│ ty[true] Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))]
//│ -> DNF(Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))]{})
//│ DNF[true] DNF(Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))]{})
//│ | ty[true] (1<int,number> | (2<int,number> | (false<bool> | true<bool>)))
//│ | -> DNF(1<int,number>{} | 2<int,number>{} | false<bool>{} | true<bool>{})
//│ | DNF[true] DNF(1<int,number>{} | 2<int,number>{} | false<bool>{} | true<bool>{})
//│ | ~> (1<int,number> | (2<int,number> | (false<bool> | true<bool>)))
//│ ~> Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))]
//│ Recanon: Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))]
//│  where: 
//│ [occs] LinkedHashMap()
//│ [vars] TreeSet()
//│ [bounds] 
//│ [rec] HashSet()
//│ [sub] 
//│ Resimplified: Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))]
//│  where: 
//│ Recons: Array[(1<int,number> | (2<int,number> | (false<bool> | true<bool>)))]
//│ p1: Array[1 | 2 | bool]
//│   = [ 1, 2, 2 ]


def q: Array[int]
q = if true then (1,1) else (1,1,1)
//│ q: Array[int]
//│ Array[1]
//│   <:  q:
//│ Array[int]
//│  = [ 1, 1 ]

def h f = (f (1,2,false), f (1,true))
//│ h: (Array[1 | 2 | bool] -> 'a) -> ('a, 'a,)
//│  = [Function: h]

q1 = (1,1,1,1)
q2 = (1,1)
fx ((a,b,c)) = a + b + c
fx q1
fx q2
//│ q1: (1, 1, 1, 1,)
//│   = [ 1, 1, 1, 1 ]
//│ q2: (1, 1,)
//│   = [ 1, 1 ]
//│ fx: (int, int, int,) -> int
//│   = [Function: fx]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.320: 	fx q1
//│ ║         	^^^^^
//│ ╟── expression of type `(1, 1, 1, 1,)` does not match type `(?a, ?b, ?c,)`
//│ ║  l.317: 	q1 = (1,1,1,1)
//│ ║         	      ^^^^^^^
//│ ╟── but it flows into reference with expected type `(?d, ?e, ?f,)`
//│ ║  l.320: 	fx q1
//│ ║         	   ^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.319: 	fx ((a,b,c)) = a + b + c
//│ ╙──       	     ^^^^^
//│ res: error | int
//│    = 3
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.321: 	fx q2
//│ ║         	^^^^^
//│ ╟── expression of type `(1, 1,)` does not match type `(?a, ?b, ?c,)`
//│ ║  l.318: 	q2 = (1,1)
//│ ║         	      ^^^
//│ ╟── but it flows into reference with expected type `(?d, ?e, ?f,)`
//│ ║  l.321: 	fx q2
//│ ║         	   ^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.319: 	fx ((a,b,c)) = a + b + c
//│ ╙──       	     ^^^^^
//│ res: error | int
//│    = NaN


// :d
q = (1,1)
//│ (1, 1,)
//│   <:  q:
//│ Array[int]
//│  = [ 1, 1 ]

def sum: Array[int] -> int
t1 = (1,2,3,4,5,6)
sum t1
t2 = (1,1,2, true)
sum t2
//│ sum: Array[int] -> int
//│ t1: (1, 2, 3, 4, 5, 6,)
//│   = [ 1, 2, 3, 4, 5, 6 ]
//│ res: int
//│ Runtime error:
//│   ReferenceError: sum is not defined
//│ t2: (1, 1, 2, true,)
//│   = [ 1, 1, 2, true ]
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.369: 	sum t2
//│ ║         	^^^^^^
//│ ╟── expression of type `true` does not match type `int`
//│ ║  l.368: 	t2 = (1,1,2, true)
//│ ║         	             ^^^^
//│ ╟── but it flows into reference with expected type `Array[int]`
//│ ║  l.369: 	sum t2
//│ ║         	    ^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.365: 	def sum: Array[int] -> int
//│ ╙──       	               ^^^
//│ res: error | int
//│ Runtime error:
//│   ReferenceError: sum is not defined
