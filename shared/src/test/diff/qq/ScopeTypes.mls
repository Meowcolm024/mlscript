:NewDefs
:NoJS


run
//│ forall 'a. Code['a, nothing] -> 'a

:e
code"x => ${run(code"x")}"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.9: 	code"x => ${run(code"x")}"
//│ ║       	            ^^^^^^^^^^^^
//│ ╙── expression of type `?x` does not match type `nothing`
//│ Code[forall 'a. Code['a, anything] -> 'a, nothing]


fun test(cde) =
  code"x => x + ${cde}"
//│ fun test: Code[Int, anything] -> Code[Int -> Int, nothing]

:e
code"y => ${ run(test(code"y")), code"0" }"
//│ Code[Int -> 0, nothing]
//│ TEST CASE FAILURE: There was an unexpected lack of type error


fun test(cde, f) =
  code"x => x + ${f(cde)}"
//│ fun test: forall 'a. ('a, 'a -> Code[Int, anything]) -> Code[Int -> Int, nothing]

run(test(code"1", id))
//│ Int -> Int


fun test(cde: Code[Int, 'a], f: forall 'c: Code[Int, 'c] -> Code[Int, 'c]) =
  code"x => x + ${f(cde)}"
//│ fun test: (cde: Code[Int, anything], f: forall 'c. Code[Int, 'c] -> Code[Int, 'c]) -> Code[Int -> Int, nothing]

run(test(code"1", id))
//│ Int -> Int

:e
code"x => ${ run(test(code"x", id)), code"x" }"
//│ Code[forall 'a. (Int & 'a) -> 'a, nothing]
//│ TEST CASE FAILURE: There was an unexpected lack of type error

:e
code"x => ${ let c = code"x" in run(test(c, id)), c }"
//│ Code[forall 'a. (Int & 'a) -> 'a, nothing]
//│ TEST CASE FAILURE: There was an unexpected lack of type error


fun test(f) =
  code"x => x + ${f(code"x + 1")}"
//│ fun test: (Code[Int, ??x] -> Code[Int, anything]) -> Code[Int -> Int, nothing]


let myrun = c => run(c)
//│ let myrun: forall 'a. Code['a, nothing] -> 'a

:e
code"x => ${ test(myrun) }"
//│ ╔══[ERROR] Type error in application
//│ ║  l.62: 	code"x => ${ test(myrun) }"
//│ ║        	             ^^^^^^^^^^^
//│ ╟── type variable `?x` leaks out of its scope
//│ ╟── into type `nothing`
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this reference:
//│ ║  l.54: 	  code"x => x + ${f(code"x + 1")}"
//│ ╙──      	                  ^
//│ Code[anything -> nothing, nothing]

:e
code"x => ${ test(c => run(c), code"0") }"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.75: 	code"x => ${ test(c => run(c), code"0") }"
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── argument list of type `[forall ?a ?b. ?b -> ?a, Code[0, nothing]]` does not match type `[?c]`
//│ ║  l.75: 	code"x => ${ test(c => run(c), code"0") }"
//│ ╙──      	                 ^^^^^^^^^^^^^^^^^^^^^^
//│ Code[anything -> Int -> Int, nothing]


:e
code"x => ${ test(c => run(c), code"x") }"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.86: 	code"x => ${ test(c => run(c), code"x") }"
//│ ║        	             ^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── argument list of type `[forall ?a ?b. ?b -> ?a, Code[?c, ?x]]` does not match type `[?d]`
//│ ║  l.86: 	code"x => ${ test(c => run(c), code"x") }"
//│ ╙──      	                 ^^^^^^^^^^^^^^^^^^^^^^
//│ Code[anything -> Int -> Int, nothing]


:e
fun test2(a) = code"x => ${ test(c => run(c), a) }"
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.97: 	fun test2(a) = code"x => ${ test(c => run(c), a) }"
//│ ║        	                            ^^^^^^^^^^^^^^^^^^^^
//│ ╟── argument list of type `[forall ?a ?b. ?b -> ?a, ?c]` does not match type `[?d]`
//│ ║  l.97: 	fun test2(a) = code"x => ${ test(c => run(c), a) }"
//│ ╙──      	                                ^^^^^^^^^^^^^^^^
//│ fun test2: anything -> Code[anything -> Int -> Int, nothing]

type Hide[C] = C & (C | Int)
//│ type Hide[C] = C

let r = code"y => ${ code"x => ${ code"x + y": Code[Int, Hide['a]] }" }"
run(r)
//│ let r: Code[Int -> Int -> Int, nothing]
//│ Int -> Int -> Int

fun f[A](x: Code[Int, A]): Code[Int, A] = code"${x} + 1"
//│ fun f: forall 'A. (x: Code[Int, 'A]) -> Code[Int, 'A]

run(f(Const(42)))
//│ Int

run(code"x => x + 1 + ${f(code"x")}")
//│ Int -> Int
