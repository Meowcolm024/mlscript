:NewDefs
:DontDistributeForalls

class Z 
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }

abstract class K[type T]: KS[?]
class KS[A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?]
//│ class KS[A](ev: K[A]) extends K

:d
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(e1, e2) else 0
//│ 0. Typing TypingUnit(List(NuFunDef(None,Var(fr),None,List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))))), NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(fr),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),Some(IntLit(0))))))))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int)))))
//│ | 0. Created lazy type info for NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(fr),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),Some(IntLit(0))))))))
//│ | Completing fun fr: (K['L], K['L]) -> Int
//│ | | Type params 
//│ | | Params 
//│ | | Typing type Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))
//│ | | | vars=Map() newDefsInfo=Map()
//│ | | | 1. type Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))
//│ | | | | 1. type Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L))))))
//│ | | | | | 1. type AppliedType(TypeName(K),List('L))
//│ | | | | | | 1. type 'L
//│ | | | | | | => 'L71'
//│ | | | | | => K['L71']
//│ | | | | | 1. type AppliedType(TypeName(K),List('L))
//│ | | | | | | 1. type 'L
//│ | | | | | | => 'L71'
//│ | | | | | => K['L71']
//│ | | | | => (K['L71'], K['L71'],)
//│ | | | | 1. type TypeName(Int)
//│ | | | | => Int
//│ | | | => ((K['L71'], K['L71'],) -> Int)
//│ | | => ((K['L71'], K['L71'],) -> Int) ——— 'L71'
//│ | | Inferred poly constr: ((K['L71'], K['L71'],) -> Int)  —— where 
//│ | | Type fr polymorphically? true && (0 === 0 || false || false
//│ | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›› <! fr72'
//│ | |   where 
//│ | | 1. C ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›› <! fr72'    (0)
//│ | | | NEW fr72' LB (0)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(),Right(PolyType(List(),Function(Tuple(List((None,Field(None,AppliedType(TypeName(K),List('L)))), (None,Field(None,AppliedType(TypeName(K),List('L)))))),TypeName(Int))))),‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)››) where 
//│ | Completing fun fr = (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0}
//│ | | Type params (TypeName(L),L73',TypeParamInfo(None,false,None,None))
//│ | | Params 
//│ | | Type fr polymorphically? true && (0 === 0 || true || false
//│ | | 1. Typing term (l: K‹L›, r: K‹L›,) => {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0}
//│ | | | 1. Typing pattern [l: K‹L›, r: K‹L›,]
//│ | | | | 1. Typing pattern l : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L73') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L73'
//│ | | | | | | => K[‘L73']
//│ | | | | | => K[‘L73'] ——— 
//│ | | | | 1. : K[‘L73']
//│ | | | | 1. Typing pattern r : K[L]
//│ | | | | | Typing type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | vars=Map(L -> ‘L73') newDefsInfo=Map()
//│ | | | | | | 1. type AppliedType(TypeName(K),List(TypeName(L)))
//│ | | | | | | | 1. type TypeName(L)
//│ | | | | | | | => ‘L73'
//│ | | | | | | => K[‘L73']
//│ | | | | | => K[‘L73'] ——— 
//│ | | | | 1. : K[‘L73']
//│ | | | 1. : (l: K[‘L73'], r: K[‘L73'],)
//│ | | | 1. Typing term {if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0}
//│ | | | | 1. Typing term if (and(is(l, KS(e1,),), is(r, KS(e2,),),)) then fr(e1, e2,) else 0
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(l); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))
//│ | | | | | [Desugarer.destructPattern] Result: «l is Var(KS)»
//│ | | | | | [Desugarer.destructPattern] scrutinee = Var(r); pattern = App(Var(KS),Tup(List((None,Fld(_,Var(e2))))))
//│ | | | | | [Desugarer.destructPattern] Result: «r is Var(KS)»
//│ | | | | | Desugared term: case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }; _ => 0 }
//│ | | | | | 1. Typing term case l of { KS => let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }; _ => 0 }
//│ | | | | | | 1. Typing term l
//│ | | | | | | 1. : K[‘L73']
//│ | | | | | | CONSTRAIN K[‘L73'] <! Object
//│ | | | | | |   where 
//│ | | | | | | 1. C K[‘L73'] <! Object    (0)
//│ | | | | | | | Assigning T :: T55' := ‘L73' where 
//│ | | | | | | | Set T55_74' ~> T55'
//│ | | | | | | | Assigned Some(‘L73')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L73'..‘L73'}) <! #Object<>    (2)
//│ | | | | | | | | Already a subtype by <:<
//│ | | | | | | Match arm KS: #KS<Object,K> & {KS#A: mut A58_75'..A58_76'} intl {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')}
//│ | | | | | | var rfn: l :: K[‘L73'] & #KS<Object,K> & {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')}
//│ | | | | | | 2. Typing term let $unapp = (KS).unapply(l,) in let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }
//│ | | | | | | | 2. Typing term (KS).unapply(l,)
//│ | | | | | | | | 2. Typing term (KS).unapply
//│ | | | | | | | | | 2. Typing term (x,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | 3. Typing pattern [x,]
//│ | | | | | | | | | | | 3. Typing pattern x
//│ | | | | | | | | | | | 3. : x79'''
//│ | | | | | | | | | | 3. : (x79''',)
//│ | | | | | | | | | | 3. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | 3. Typing term x : KS
//│ | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | 3. : x79'''
//│ | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | vars=Map(L -> ‘L73') newDefsInfo=Map()
//│ | | | | | | | | | | | | | 3. type TypeName(KS)
//│ | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | CONSTRAIN x79''' <! #KS<Object,K>
//│ | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | 3. C x79''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | NEW x79''' UB (0)
//│ | | | | | | | | | | | 3. : #KS<Object,K>
//│ | | | | | | | | | | | 3. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | 3. Typing term (x).#ev
//│ | | | | | | | | | | | | | 3. Typing term x
//│ | | | | | | | | | | | | | 3. : x79'''
//│ | | | | | | | | | | | | | CONSTRAIN x79''' <! {#ev: #ev80'''}
//│ | | | | | | | | | | | | |   where 
//│ 		x79''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | 3. C x79''' <! {#ev: #ev80'''}    (0)
//│ | | | | | | | | | | | | | | NEW x79''' UB (3)
//│ | | | | | | | | | | | | 3. : #ev80'''
//│ | | | | | | | | | | | 3. : (#ev80''',)
//│ | | | | | | | | | | 3. : (#ev80''',)
//│ | | | | | | | | | | Inferred poly constr: (x79''' -> (#ev80''',))  —— where 
//│ 		x79''' <: {#ev: #ev80'''} & #KS<Object,K>
//│ | | | | | | | | | 2. : ‹∀ 2. (x79''' -> (#ev80''',))›
//│ | | | | | | | | 2. : ‹∀ 2. (x79''' -> (#ev80''',))›
//│ | | | | | | | | 2. Typing term l
//│ | | | | | | | | 2. : ((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')})
//│ | | | | | | | | CONSTRAIN ‹∀ 2. (x79''' -> (#ev80''',))› <! (((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')}) -> α81'')
//│ | | | | | | | |   where 
//│ 		A58_75' <: A58_76'
//│ 		x79''' <: {#ev: #ev80'''} & #KS<Object,K>
//│ | | | | | | | | 2. C ‹∀ 2. (x79''' -> (#ev80''',))› <! (((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')}) -> α81'')    (0)
//│ | | | | | | | | | INST [2]   ‹∀ 2. (x79''' -> (#ev80''',))›
//│ | | | | | | | | |   where  
//│ 		x79''' <: {#ev: #ev80'''} & #KS<Object,K>
//│ | | | | | | | | | TO [2] ~>  (x79_82'' -> (#ev80_83'',))
//│ | | | | | | | | |   where  
//│ 		x79_82'' <: {#ev: #ev80_83''} & #KS<Object,K>
//│ | | | | | | | | | 2. C (x79_82'' -> (#ev80_83'',)) <! (((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')}) -> α81'')    (2)
//│ | | | | | | | | | | 2. C (((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')}),) <! (x79_82'',)    (2)
//│ | | | | | | | | | | | 2. C ((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')}) <! x79_82''    (3)
//│ | | | | | | | | | | | | NEW x79_82'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')}) <! {#ev: #ev80_83''}    (6)
//│ | | | | | | | | | | | | | Assigning T :: T55' := ‘L73' where 
//│ | | | | | | | | | | | | | Set T55_84' ~> T55'
//│ | | | | | | | | | | | | | Assigned Some(‘L73')
//│ | | | | | | | | | | | | | Assigning A :: A58' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | Set A58_85 ~> A58'
//│ | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | 2. ARGH  DNF(2, #KS<Object,K>{KS#A: mut (A58_75' | ‘A77'')..(‘A77'' & A58_76'), T: mut ‘L73'..‘L73'})  <!  DNF(2, {#ev: #ev80_83''})
//│ | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | Consider #KS<Object,K>{KS#A: mut (A58_75' | ‘A77'')..(‘A77'' & A58_76'), T: mut ‘L73'..‘L73'} <: DNF(2, {#ev: #ev80_83''})
//│ | | | | | | | | | | | | | | Possible: List({#ev: #ev80_83''})
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut (A58_75' | ‘A77'')..(‘A77'' & A58_76'), T: mut ‘L73'..‘L73'}  %  List()  <!  List({#ev: #ev80_83''})  %  ⊥
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut (A58_75' | ‘A77'')..(‘A77'' & A58_76'), T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  {#ev:#ev80_83''}
//│ | | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut (A58_75' | ‘A77'')..(‘A77'' & A58_76'), T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  |{#ev:#ev80_83''}
//│ | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A58']) where 
//│ | | | | | | | | | | | | | | | | | | Lookup: Found mut (A58_75' | ‘A77'')..(‘A77'' & A58_76')
//│ | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A58_75' | ‘A77'')..(‘A77'' & A58_76')]) where Some(
//│ 		A58_75' <: A58_76')
//│ | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | 2. C K[(A58_75' | ‘A77'')..(‘A77'' & A58_76')] <! #ev80_83''    (5)
//│ | | | | | | | | | | | | | | | | | | NEW #ev80_83'' LB (2)
//│ | | | | | | | | | | | | 2. C ((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_75' | ‘A77'')..(A58_76' & ‘A77'')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | 2. C (#ev80_83'',) <! α81''    (2)
//│ | | | | | | | | | | | NEW α81'' LB (2)
//│ | | | | | | | 2. : α81''
//│ | | | | | | | 2. Typing term let e1 = ($unapp).0 in case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }
//│ | | | | | | | | 2. Typing term ($unapp).0
//│ | | | | | | | | | 2. Typing term $unapp
//│ | | | | | | | | | 2. : α81''
//│ | | | | | | | | | CONSTRAIN α81'' <! {0: α86''}
//│ | | | | | | | | |   where 
//│ 		A58_75' <: A58_76'
//│ 		α81'' :> (#ev80_83'',)
//│ 		#ev80_83'' :> K[(A58_75' | ‘A77'')..(‘A77'' & A58_76')]
//│ | | | | | | | | | 2. C α81'' <! {0: α86''}    (0)
//│ | | | | | | | | | | NEW α81'' UB (2)
//│ | | | | | | | | | | 2. C (#ev80_83'',) <! {0: α86''}    (2)
//│ | | | | | | | | | | | 2. C {0: #ev80_83''} <! {0: α86''}    (4)
//│ | | | | | | | | | | | | 2. C #ev80_83'' <! α86''    (3)
//│ | | | | | | | | | | | | | NEW #ev80_83'' UB (2)
//│ | | | | | | | | | | | | | 2. C K[(A58_75' | ‘A77'')..(‘A77'' & A58_76')] <! α86''    (5)
//│ | | | | | | | | | | | | | | NEW α86'' LB (2)
//│ | | | | | | | | 2. : α86''
//│ | | | | | | | | 2. Typing term case r of { KS => let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,); _ => 0 }
//│ | | | | | | | | | 2. Typing term r
//│ | | | | | | | | | 2. : K[‘L73']
//│ | | | | | | | | | CONSTRAIN K[‘L73'] <! Object
//│ | | | | | | | | |   where 
//│ | | | | | | | | | 2. C K[‘L73'] <! Object    (0)
//│ | | | | | | | | | | Assigning T :: T55' := ‘L73' where 
//│ | | | | | | | | | | Set T55_87' ~> T55'
//│ | | | | | | | | | | Assigned Some(‘L73')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L73'..‘L73'}) <! #Object<>    (2)
//│ | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | Match arm KS: #KS<Object,K> & {KS#A: mut A58_88''..A58_89''} intl {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')}
//│ | | | | | | | | | var rfn: r :: K[‘L73'] & #KS<Object,K> & {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')}
//│ | | | | | | | | | 3. Typing term let $unapp = (KS).unapply(r,) in let e2 = ($unapp).0 in fr(e1, e2,)
//│ | | | | | | | | | | 3. Typing term (KS).unapply(r,)
//│ | | | | | | | | | | | 3. Typing term (KS).unapply
//│ | | | | | | | | | | | | 3. Typing term (x::0,) => let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | TYPING POLY LAM
//│ | | | | | | | | | | | | | 4. Typing pattern [x::0,]
//│ | | | | | | | | | | | | | | 4. Typing pattern x::0
//│ | | | | | | | | | | | | | | 4. : x92''''
//│ | | | | | | | | | | | | | 4. : (x92'''',)
//│ | | | | | | | | | | | | | 4. Typing term let _ = x : KS in [(x).#ev,]
//│ | | | | | | | | | | | | | | 4. Typing term x : KS
//│ | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | 4. : x92''''
//│ | | | | | | | | | | | | | | | Typing type TypeName(KS)
//│ | | | | | | | | | | | | | | | | vars=Map(L -> ‘L73') newDefsInfo=Map()
//│ | | | | | | | | | | | | | | | | 4. type TypeName(KS)
//│ | | | | | | | | | | | | | | | | => #KS<Object,K>
//│ | | | | | | | | | | | | | | | => #KS<Object,K> ——— 
//│ | | | | | | | | | | | | | | | CONSTRAIN x92'''' <! #KS<Object,K>
//│ | | | | | | | | | | | | | | |   where 
//│ | | | | | | | | | | | | | | | 4. C x92'''' <! #KS<Object,K>    (0)
//│ | | | | | | | | | | | | | | | | NEW x92'''' UB (0)
//│ | | | | | | | | | | | | | | 4. : #KS<Object,K>
//│ | | | | | | | | | | | | | | 4. Typing term [(x).#ev,]
//│ | | | | | | | | | | | | | | | 4. Typing term (x).#ev
//│ | | | | | | | | | | | | | | | | 4. Typing term x
//│ | | | | | | | | | | | | | | | | 4. : x92''''
//│ | | | | | | | | | | | | | | | | CONSTRAIN x92'''' <! {#ev: #ev93''''}
//│ | | | | | | | | | | | | | | | |   where 
//│ 		x92'''' <: #KS<Object,K>
//│ | | | | | | | | | | | | | | | | 4. C x92'''' <! {#ev: #ev93''''}    (0)
//│ | | | | | | | | | | | | | | | | | NEW x92'''' UB (4)
//│ | | | | | | | | | | | | | | | 4. : #ev93''''
//│ | | | | | | | | | | | | | | 4. : (#ev93'''',)
//│ | | | | | | | | | | | | | 4. : (#ev93'''',)
//│ | | | | | | | | | | | | | Inferred poly constr: (x92'''' -> (#ev93'''',))  —— where 
//│ 		x92'''' <: {#ev: #ev93''''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. : ‹∀ 3. (x92'''' -> (#ev93'''',))›
//│ | | | | | | | | | | | 3. : ‹∀ 3. (x92'''' -> (#ev93'''',))›
//│ | | | | | | | | | | | 3. Typing term r
//│ | | | | | | | | | | | 3. : ((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')})
//│ | | | | | | | | | | | CONSTRAIN ‹∀ 3. (x92'''' -> (#ev93'''',))› <! (((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')}) -> α94''')
//│ | | | | | | | | | | |   where 
//│ 		A58_88'' <: A58_89''
//│ 		x92'''' <: {#ev: #ev93''''} & #KS<Object,K>
//│ | | | | | | | | | | | 3. C ‹∀ 3. (x92'''' -> (#ev93'''',))› <! (((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')}) -> α94''')    (0)
//│ | | | | | | | | | | | | INST [3]   ‹∀ 3. (x92'''' -> (#ev93'''',))›
//│ | | | | | | | | | | | |   where  
//│ 		x92'''' <: {#ev: #ev93''''} & #KS<Object,K>
//│ | | | | | | | | | | | | TO [3] ~>  (x92_95''' -> (#ev93_96''',))
//│ | | | | | | | | | | | |   where  
//│ 		x92_95''' <: {#ev: #ev93_96'''} & #KS<Object,K>
//│ | | | | | | | | | | | | 3. C (x92_95''' -> (#ev93_96''',)) <! (((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')}) -> α94''')    (2)
//│ | | | | | | | | | | | | | 3. C (((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')}),) <! (x92_95''',)    (2)
//│ | | | | | | | | | | | | | | 3. C ((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')}) <! x92_95'''    (3)
//│ | | | | | | | | | | | | | | | NEW x92_95''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')}) <! {#ev: #ev93_96'''}    (6)
//│ | | | | | | | | | | | | | | | | Assigning T :: T55' := ‘L73' where 
//│ | | | | | | | | | | | | | | | | Set T55_97' ~> T55'
//│ | | | | | | | | | | | | | | | | Assigned Some(‘L73')
//│ | | | | | | | | | | | | | | | | Assigning A :: A58' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | | | | | | Set A58_98 ~> A58'
//│ | | | | | | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | | | | | | 3. ARGH  DNF(3, #KS<Object,K>{KS#A: mut (A58_88'' | ‘A90''')..(‘A90''' & A58_89''), T: mut ‘L73'..‘L73'})  <!  DNF(3, {#ev: #ev93_96'''})
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider #KS<Object,K>{KS#A: mut (A58_88'' | ‘A90''')..(‘A90''' & A58_89''), T: mut ‘L73'..‘L73'} <: DNF(3, {#ev: #ev93_96'''})
//│ | | | | | | | | | | | | | | | | | Possible: List({#ev: #ev93_96'''})
//│ | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{KS#A: mut (A58_88'' | ‘A90''')..(‘A90''' & A58_89''), T: mut ‘L73'..‘L73'}  %  List()  <!  List({#ev: #ev93_96'''})  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{KS#A: mut (A58_88'' | ‘A90''')..(‘A90''' & A58_89''), T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  {#ev:#ev93_96'''}
//│ | | | | | | | | | | | | | | | | | | | 3. A  #KS<Object,K>{KS#A: mut (A58_88'' | ‘A90''')..(‘A90''' & A58_89''), T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  |{#ev:#ev93_96'''}
//│ | | | | | | | | | | | | | | | | | | | | Looking up field #ev in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | | | | | Lookup KS.ev : Some(K[‘A58']) where 
//│ | | | | | | | | | | | | | | | | | | | | | Lookup: Found mut (A58_88'' | ‘A90''')..(‘A90''' & A58_89'')
//│ | | | | | | | | | | | | | | | | | | | | | Fresh[0] KS.ev : Some(K[(A58_88'' | ‘A90''')..(‘A90''' & A58_89'')]) where Some(
//│ 		A58_88'' <: A58_89'')
//│ | | | | | | | | | | | | | | | | | | | | |   & None  (from refinement)
//│ | | | | | | | | | | | | | | | | | | | | 3. C K[(A58_88'' | ‘A90''')..(‘A90''' & A58_89'')] <! #ev93_96'''    (5)
//│ | | | | | | | | | | | | | | | | | | | | | NEW #ev93_96''' LB (3)
//│ | | | | | | | | | | | | | | | 3. C ((K[‘L73'] & #KS<Object,K>) & {KS#A: mut (A58_88'' | ‘A90''')..(A58_89'' & ‘A90''')}) <! #KS<Object,K>    (6)
//│ | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | 3. C (#ev93_96''',) <! α94'''    (2)
//│ | | | | | | | | | | | | | | NEW α94''' LB (3)
//│ | | | | | | | | | | 3. : α94'''
//│ | | | | | | | | | | 3. Typing term let e2 = ($unapp).0 in fr(e1, e2,)
//│ | | | | | | | | | | | 3. Typing term ($unapp).0
//│ | | | | | | | | | | | | 3. Typing term $unapp
//│ | | | | | | | | | | | | 3. : α94'''
//│ | | | | | | | | | | | | CONSTRAIN α94''' <! {0: α99'''}
//│ | | | | | | | | | | | |   where 
//│ 		A58_88'' <: A58_89''
//│ 		α94''' :> (#ev93_96''',)
//│ 		#ev93_96''' :> K[(A58_88'' | ‘A90''')..(‘A90''' & A58_89'')]
//│ | | | | | | | | | | | | 3. C α94''' <! {0: α99'''}    (0)
//│ | | | | | | | | | | | | | NEW α94''' UB (3)
//│ | | | | | | | | | | | | | 3. C (#ev93_96''',) <! {0: α99'''}    (2)
//│ | | | | | | | | | | | | | | 3. C {0: #ev93_96'''} <! {0: α99'''}    (4)
//│ | | | | | | | | | | | | | | | 3. C #ev93_96''' <! α99'''    (3)
//│ | | | | | | | | | | | | | | | | NEW #ev93_96''' UB (3)
//│ | | | | | | | | | | | | | | | | 3. C K[(A58_88'' | ‘A90''')..(‘A90''' & A58_89'')] <! α99'''    (5)
//│ | | | | | | | | | | | | | | | | | NEW α99''' LB (3)
//│ | | | | | | | | | | | 3. : α99'''
//│ | | | | | | | | | | | 3. Typing term fr(e1, e2,)
//│ | | | | | | | | | | | | 3. Typing term fr
//│ | | | | | | | | | | | | 3. : ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)››
//│ | | | | | | | | | | | | 3. Typing term e1
//│ | | | | | | | | | | | | 3. : α86''
//│ | | | | | | | | | | | | 3. Typing term e2
//│ | | | | | | | | | | | | 3. : α99'''
//│ | | | | | | | | | | | | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›› <! ((α86'', α99''',) -> α100''')
//│ | | | | | | | | | | | |   where 
//│ 		A58_75' <: A58_76'
//│ 		α86'' :> K[(A58_75' | ‘A77'')..(‘A77'' & A58_76')]
//│ 		A58_88'' <: A58_89''
//│ 		α99''' :> K[(A58_88'' | ‘A90''')..(‘A90''' & A58_89'')]
//│ | | | | | | | | | | | | 3. C ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›› <! ((α86'', α99''',) -> α100''')    (0)
//│ | | | | | | | | | | | | | 3. C ‹∀ 0. ((K['L71'], K['L71'],) -> Int)› <! ((α86'', α99''',) -> α100''')    (2)
//│ | | | | | | | | | | | | | | INST [0]   ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | TO [3] ~>  ((K['L71_101'''], K['L71_101'''],) -> Int)
//│ | | | | | | | | | | | | | |   where  
//│ | | | | | | | | | | | | | | 3. C ((K['L71_101'''], K['L71_101'''],) -> Int) <! ((α86'', α99''',) -> α100''')    (4)
//│ | | | | | | | | | | | | | | | 3. C (α86'', α99''',) <! (K['L71_101'''], K['L71_101'''],)    (3)
//│ | | | | | | | | | | | | | | | | 3. C α86'' <! K['L71_101''']    (4)
//│ | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | EXTR[-] K['L71_101'''] || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | EXTR[+] 'L71_101''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | => 'L71_102''
//│ | | | | | | | | | | | | | | | | | | EXTR[-] 'L71_101''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | EXTR[-] 'L71_102'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | => 'L71_102''
//│ | | | | | | | | | | | | | | | | | | => 'L71_103''
//│ | | | | | | | | | | | | | | | | | => K[? :> 'L71_102'' <: 'L71_103'']
//│ | | | | | | | | | | | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L71_102''
//│ | | | | | | | | | | | | | | | | | | Reconstraining 'L71_103''
//│ | | | | | | | | | | | | | | | | | EXTR RHS  ~>  K[? :> 'L71_102'' <: 'L71_103'']  to 2
//│ | | | | | | | | | | | | | | | | |  where 
//│ 		'L71_103'' <: 'L71_102''
//│ | | | | | | | | | | | | | | | | | 3. C α86'' <! K[? :> 'L71_102'' <: 'L71_103'']    (4)
//│ | | | | | | | | | | | | | | | | | | NEW α86'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C K[(A58_75' | ‘A77'')..(‘A77'' & A58_76')] <! K[? :> 'L71_102'' <: 'L71_103'']    (7)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L71_102'' <! (A58_75' | ‘A77'')..(‘A77'' & A58_76')    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L71_102'' <! (A58_75' | ‘A77'')    (9)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L71_102'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | 3. C (A58_75' | ‘A77'')..(‘A77'' & A58_76') <! 'L71_103''    (6)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A77'' & A58_76') <! 'L71_103''    (9)
//│ | | | | | | | | | | | | | | | | | | | | | NEW 'L71_103'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (‘A77'' & A58_76') <! 'L71_102''    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L71_102'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A77'' & A58_76') <! (A58_75' | ‘A77'')    (13)
//│ | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | 3. C α99''' <! K['L71_101''']    (4)
//│ | | | | | | | | | | | | | | | | | NEW α99''' UB (3)
//│ | | | | | | | | | | | | | | | | | 3. C K[(A58_88'' | ‘A90''')..(‘A90''' & A58_89'')] <! K['L71_101''']    (7)
//│ | | | | | | | | | | | | | | | | | | 3. C (A58_88'' | ‘A90''')..(‘A90''' & A58_89'') <! 'L71_101'''    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C (‘A90''' & A58_89'') <! 'L71_101'''    (9)
//│ | | | | | | | | | | | | | | | | | | | | NEW 'L71_101''' LB (3)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A90''' & A58_89'') <! 'L71_102''    (12)
//│ | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[+] (A58_89'' & ‘A90''') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] A58_89'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | => A58_89''
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A90''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A90''')
//│ | | | | | | | | | | | | | | | | | | | | | => (A58_89'' & ⊤(‘A90'''))
//│ | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (A58_89'' & ⊤(‘A90'''))  to 2
//│ | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | 3. C (A58_89'' & ⊤(‘A90''')) <! 'L71_102''    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L71_102'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (A58_89'' & ⊤(‘A90''')) <! (A58_75' | ‘A77'')    (15)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧⊤(‘A90''')∧A58_89'')  <!  DNF(2, A58_75' | {}∧‘A77'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. C A58_89'' <! ((A58_75' | ‘A77'') | ~(⊤(‘A90''')))    (17)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | NEW A58_89'' UB (2)
//│ | | | | | | | | | | | | | | | | | | 3. C 'L71_101''' <! (A58_88'' | ‘A90''')..(‘A90''' & A58_89'')    (6)
//│ | | | | | | | | | | | | | | | | | | | 3. C 'L71_101''' <! (A58_88'' | ‘A90''')    (9)
//│ | | | | | | | | | | | | | | | | | | | | NEW 'L71_101''' UB (3)
//│ | | | | | | | | | | | | | | | | | | | | 3. C (‘A90''' & A58_89'') <! (A58_88'' | ‘A90''')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | | | | | | 3. C 'L71_103'' <! (A58_88'' | ‘A90''')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | wrong level: 3
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] (‘A90''' | A58_88'') || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A90''' || 2 .. 1024  3 false
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A90''')
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[-] A58_88'' || 2 .. 1024  2 true
//│ | | | | | | | | | | | | | | | | | | | | | | => A58_88''
//│ | | | | | | | | | | | | | | | | | | | | | => (⊥(‘A90''') | A58_88'')
//│ | | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  (⊥(‘A90''') | A58_88'')  to 2
//│ | | | | | | | | | | | | | | | | | | | | |  where 
//│ 		A58_75' <: A58_76'
//│ 		A58_88'' <: A58_89''
//│ 		A58_89'' <: ((A58_75' | ‘A77'') | ~(⊤(‘A90''')))
//│ | | | | | | | | | | | | | | | | | | | | | 3. C 'L71_103'' <! (⊥(‘A90''') | A58_88'')    (12)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW 'L71_103'' UB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A77'' & A58_76') <! (⊥(‘A90''') | A58_88'')    (15)
//│ | | | | | | | | | | | | | | | | | | | | | | | 3. ARGH  DNF(2, {}∧‘A77''∧A58_76')  <!  DNF(2, A58_88'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | 3. C A58_76' <! (A58_88'' | ~(‘A77''))    (17)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A77'' & A58_76') <! A58_88''    (17)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A58_88'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A77'' & A58_76') <! A58_89''    (19)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A58_89'' LB (2)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 3. C (‘A77'' & A58_76') <! ((A58_75' | ‘A77'') | ~(⊤(‘A90''')))    (21)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | | | | | | | | 3. C Int <! α100'''    (3)
//│ | | | | | | | | | | | | | | | | NEW α100''' LB (0)
//│ | | | | | | | | | | | 3. : α100'''
//│ | | | | | | | | | | 3. : α100'''
//│ | | | | | | | | | 3. : α100'''
//│ | | | | | | | | | CONSTRAIN α100''' <! α91''
//│ | | | | | | | | |   where 
//│ 		α100''' :> Int
//│ | | | | | | | | | 3. C α100''' <! α91''    (0)
//│ | | | | | | | | | | NEW α100''' UB (2)
//│ | | | | | | | | | | 3. C Int <! α91''    (2)
//│ | | | | | | | | | | | NEW α91'' LB (0)
//│ | | | | | | | | | 2. Typing term 0
//│ | | | | | | | | | 2. : #0<Int,Num,Object>
//│ | | | | | | | | | finishing branch: [(#KS<Object,K>,{KS#A: mut A58_88''..A58_89''})] + List((α104'',⊤)) and [α91''] | #0<Int,Num,Object>
//│ | | | | | | | | | finishing case K[‘L73'] <: ((#KS<Object,K> & {KS#A: mut A58_88''..A58_89''}) | (α104'' & ~(#KS<Object,K>)))
//│ | | | | | | | | | CONSTRAIN K[‘L73'] <! ((#KS<Object,K> & {KS#A: mut A58_88''..A58_89''}) | (α104'' & ~(#KS<Object,K>)))
//│ | | | | | | | | |   where 
//│ 		A58_75' <: A58_76'
//│ 		A58_88'' :> (‘A77'' & A58_76') <: A58_89''
//│ 		A58_89'' :> (‘A77'' & A58_76') <: ((A58_75' | ‘A77'') | ~(⊤(‘A90''')))
//│ | | | | | | | | | 2. C K[‘L73'] <! ((#KS<Object,K> & {KS#A: mut A58_88''..A58_89''}) | (α104'' & ~(#KS<Object,K>)))    (0)
//│ | | | | | | | | | | Assigning T :: T55' := ‘L73' where 
//│ | | | | | | | | | | Set T55_105' ~> T55'
//│ | | | | | | | | | | Assigned Some(‘L73')
//│ | | | | | | | | | | 2. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L73'..‘L73'}) <! ((#KS<Object,K> & {KS#A: mut A58_88''..A58_89''}) | (α104'' & ~(#KS<Object,K>)))    (2)
//│ | | | | | | | | | | | Assigning A :: A58' := ? :> ⊥ <: ⊤
//│ | | | | | | | | | | | Set A58_106 ~> A58'
//│ | | | | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | | | | 2. ARGH  DNF(1, #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'})  <!  DNF(2, #KS<Object,K>{KS#A: mut A58_88''..A58_89''} | α104''∧~(#KS<Object,K>))
//│ | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | Consider #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'} <: DNF(2, #KS<Object,K>{KS#A: mut A58_88''..A58_89''} | α104''∧~(#KS<Object,K>))
//│ | | | | | | | | | | | | Possible: List(#KS<Object,K>{KS#A: mut A58_88''..A58_89''})
//│ | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List((#KS<Object,K> & {KS#A: mut A58_88''..A58_89''}))  %  ⊥
//│ | | | | | | | | | | | | | Case.1
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List(#KS<Object,K>)  %  ⊥
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  #KS<Object,K>
//│ | | | | | | | | | | | | | | | class checking #KS<Object,K> List(#KS<Object,K>)
//│ | | | | | | | | | | | | | | | OK  #KS<Object,K>  <:  #KS<Object,K>
//│ | | | | | | | | | | | | | Case.2
//│ | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List({KS#A: mut A58_88''..A58_89''})  %  ⊥
//│ | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  {KS#A:mut A58_88''..A58_89''}
//│ | | | | | | | | | | | | | | | 2. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  |{KS#A:mut A58_88''..A58_89''}
//│ | | | | | | | | | | | | | | | | Looking up field KS#A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | | | | Lookup KS.KS#A : Some(mut A58'..A58') where 
//│ | | | | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | | | | Fresh[0] KS.KS#A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | | | | 2. C ⊥..⊤ <! A58_89''    (2)
//│ | | | | | | | | | | | | | | | | | 2. C ⊤ <! A58_89''    (4)
//│ | | | | | | | | | | | | | | | | | | NEW A58_89'' LB (0)
//│ | | | | | | | | | | | | | | | | | | 2. C ⊤ <! ((A58_75' | ‘A77'') | ~(⊤(‘A90''')))    (6)
//│ | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, )  <!  DNF(2, A58_75' | {}∧‘A77'' | ~(⊤(‘A90''')))
//│ | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(2, A58_75' | {}∧‘A77'' | ~(⊤(‘A90''')))
//│ | | | | | | | | | | | | | | | | | | | | Possible: List(A58_75', {}∧‘A77'', ~(⊤(‘A90''')))
//│ | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(A58_75', ‘A77'', ~(⊤(‘A90''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(‘A77'', ~(⊤(‘A90''')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List()  <!  List(~(⊤(‘A90''')))  %  ‘A77''
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. A  ⊤  %  List(⊤(‘A90'''))  <!  List()  %  ‘A77''
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A90''')  %  List()  <!  List()  %  ‘A77''
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A90''') & ~(‘A77'')) <! A58_75'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] (⊤(‘A90''') & ~(‘A77'')) || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ⊤(‘A90''') || 1 .. 1024  0 true
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A90''')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ~(‘A77'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR[-] ‘A77'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | => ⊥(‘A77'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | => ~(⊥(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | => (⊤(‘A90''') & ~(⊥(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | EXTR LHS  ~>  (⊤(‘A90''') & ~(⊥(‘A77'')))  to 1
//│ | | | | | | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A90''') & ~(⊥(‘A77''))) <! A58_75'    (5)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A58_75' LB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A90''') & ~(⊥(‘A77''))) <! A58_76'    (7)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | NEW A58_76' LB (0)
//│ | | | | | | | | | | | | | | | | 2. C A58_88'' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | | | | 2. C A58_88'' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | | | | NEW A58_88'' UB (0)
//│ | | | | | | | | | | | | | | | | | | 2. C (‘A77'' & A58_76') <! ⊥    (6)
//│ | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(2, {}∧‘A77''∧A58_76')  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | 2. C A58_76' <! ~(‘A77'')    (8)
//│ | | | | | | | | | | | | | | | | | | | | | wrong level: 2
//│ | | | | | | | | | | | | | | | | | | | | | EXTR[-] ~(‘A77'') || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | EXTR[+] ‘A77'' || 1 .. 1024  2 false
//│ | | | | | | | | | | | | | | | | | | | | | | => ⊤(‘A77'')
//│ | | | | | | | | | | | | | | | | | | | | | => ~(⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | EXTR RHS  ~>  ~(⊤(‘A77''))  to 1
//│ | | | | | | | | | | | | | | | | | | | | |  where 
//│ | | | | | | | | | | | | | | | | | | | | | 2. C A58_76' <! ~(⊤(‘A77''))    (8)
//│ | | | | | | | | | | | | | | | | | | | | | | NEW A58_76' UB (0)
//│ | | | | | | | | | | | | | | | | | | | | | | 2. C (⊤(‘A90''') & ~(⊥(‘A77''))) <! ~(⊤(‘A77''))    (10)
//│ | | | | | | | | | | | | | | | | | | | | | | | 2. ARGH  DNF(0, {}∧⊤(‘A90''')∧~(⊥(‘A77'')))  <!  DNF(0, ~(⊤(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A90''') <: DNF(0, ~(⊤(‘A77'')) | {}∧⊥(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A77'')), {}∧⊥(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A90''')  %  List()  <!  List(~(⊤(‘A77'')), ⊥(‘A77''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A90''')  %  List(⊤(‘A77''))  <!  List(⊥(‘A77''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A77'')∧⊤(‘A90''')  %  List()  <!  List(⊥(‘A77''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. A  {}∧⊤(‘A77'')∧⊤(‘A90''')  %  List()  <!  List()  %  ⊥(‘A77'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A77''), ⊤(‘A90''')) List(⊥(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A90''') & ~(⊥(‘A77''))) <: ~(⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[-] ~(⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[-] ~(⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A77'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A77'')
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> ~(⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A90''') & ~(⊥(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A90''') & ~(⊥(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A90''')∧~(⊥(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A90''') & ~(⊥(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! (α91'' | #0<Int,Num,Object>)
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α91'' :> Int
//│ | | | | | | | | | | | | | | | | | | | | | | | | | | | | 2. C #error<> <! (α91'' | #0<Int,Num,Object>)    (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.21: 	  if l is KS(e1) and r is KS(e2) then fr(e1, e2) else 0
//│ ║        	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╙── expression of type `??A & ~??A0` does not match type `~??A1`
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | 2. : (α91'' | #0<Int,Num,Object>)
//│ | | | | | | | 2. : (α91'' | #0<Int,Num,Object>)
//│ | | | | | | 2. : (α91'' | #0<Int,Num,Object>)
//│ | | | | | | CONSTRAIN (α91'' | #0<Int,Num,Object>) <! α78'
//│ | | | | | |   where 
//│ 		α91'' :> Int
//│ | | | | | | 2. C (α91'' | #0<Int,Num,Object>) <! α78'    (0)
//│ | | | | | | | wrong level: 2
//│ | | | | | | | EXTR[+] (α91'' | #0<Int,Num,Object>) || 1 .. 1024  2 false
//│ | | | | | | | | EXTR[+] α91'' || 1 .. 1024  2 false
//│ | | | | | | | | | EXTR[+] Int || 1 .. 1024  0 true
//│ | | | | | | | | | => Int
//│ | | | | | | | | => α91_111'
//│ | | | | | | | | EXTR[+] #0<Int,Num,Object> || 1 .. 1024  0 true
//│ | | | | | | | | => #0<Int,Num,Object>
//│ | | | | | | | => (α91_111' | #0<Int,Num,Object>)
//│ | | | | | | | RECONSTRAINING TVs
//│ | | | | | | | | Reconstraining α91_111'
//│ | | | | | | | EXTR LHS  ~>  (α91_111' | #0<Int,Num,Object>)  to 1
//│ | | | | | | |  where 
//│ 		α91_111' :> Int
//│ | | | | | | | 2. C (α91_111' | #0<Int,Num,Object>) <! α78'    (0)
//│ | | | | | | | | NEW α78' LB (1)
//│ | | | | | | 1. Typing term 0
//│ | | | | | | 1. : #0<Int,Num,Object>
//│ | | | | | | finishing branch: [(#KS<Object,K>,{KS#A: mut A58_75'..A58_76'})] + List((α112',⊤)) and [α78'] | #0<Int,Num,Object>
//│ | | | | | | finishing case K[‘L73'] <: ((#KS<Object,K> & {KS#A: mut A58_75'..A58_76'}) | (α112' & ~(#KS<Object,K>)))
//│ | | | | | | CONSTRAIN K[‘L73'] <! ((#KS<Object,K> & {KS#A: mut A58_75'..A58_76'}) | (α112' & ~(#KS<Object,K>)))
//│ | | | | | |   where 
//│ 		A58_75' :> (⊤(‘A90''') & ~(⊥(‘A77''))) <: A58_76'
//│ 		A58_76' :> (⊤(‘A90''') & ~(⊥(‘A77''))) <: ~(⊤(‘A77''))
//│ | | | | | | 1. C K[‘L73'] <! ((#KS<Object,K> & {KS#A: mut A58_75'..A58_76'}) | (α112' & ~(#KS<Object,K>)))    (0)
//│ | | | | | | | Assigning T :: T55' := ‘L73' where 
//│ | | | | | | | Set T55_113' ~> T55'
//│ | | | | | | | Assigned Some(‘L73')
//│ | | | | | | | 1. C ((#K<Object> & KS[? :> ⊥ <: ⊤]) & {T: mut ‘L73'..‘L73'}) <! ((#KS<Object,K> & {KS#A: mut A58_75'..A58_76'}) | (α112' & ~(#KS<Object,K>)))    (2)
//│ | | | | | | | | Assigning A :: A58' := ? :> ⊥ <: ⊤
//│ | | | | | | | | Set A58_114 ~> A58'
//│ | | | | | | | | Assigned Some(⊥..⊤)
//│ | | | | | | | | 1. ARGH  DNF(1, #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'})  <!  DNF(1, #KS<Object,K>{KS#A: mut A58_75'..A58_76'} | α112'∧~(#KS<Object,K>))
//│ | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | Consider #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'} <: DNF(1, #KS<Object,K>{KS#A: mut A58_75'..A58_76'} | α112'∧~(#KS<Object,K>))
//│ | | | | | | | | | Possible: List(#KS<Object,K>{KS#A: mut A58_75'..A58_76'})
//│ | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List((#KS<Object,K> & {KS#A: mut A58_75'..A58_76'}))  %  ⊥
//│ | | | | | | | | | | Case.1
//│ | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List(#KS<Object,K>)  %  ⊥
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  #KS<Object,K>
//│ | | | | | | | | | | | | class checking #KS<Object,K> List(#KS<Object,K>)
//│ | | | | | | | | | | | | OK  #KS<Object,K>  <:  #KS<Object,K>
//│ | | | | | | | | | | Case.2
//│ | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List({KS#A: mut A58_75'..A58_76'})  %  ⊥
//│ | | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  {KS#A:mut A58_75'..A58_76'}
//│ | | | | | | | | | | | | 1. A  #KS<Object,K>{KS#A: mut ..⊤, T: mut ‘L73'..‘L73'}  %  List()  <!  List()  %  |{KS#A:mut A58_75'..A58_76'}
//│ | | | | | | | | | | | | | Looking up field KS#A in Some(KS) & TreeSet() & {...}
//│ | | | | | | | | | | | | | | Lookup KS.KS#A : Some(mut A58'..A58') where 
//│ | | | | | | | | | | | | | | Lookup: Found mut ..⊤
//│ | | | | | | | | | | | | | | Fresh[0] KS.KS#A : Some(mut ⊥..⊤..⊥..⊤) where Some()
//│ | | | | | | | | | | | | | |   & Some(mut ..⊤)  (from refinement)
//│ | | | | | | | | | | | | | 1. C ⊥..⊤ <! A58_76'    (2)
//│ | | | | | | | | | | | | | | 1. C ⊤ <! A58_76'    (4)
//│ | | | | | | | | | | | | | | | NEW A58_76' LB (0)
//│ | | | | | | | | | | | | | | | 1. C ⊤ <! ~(⊤(‘A77''))    (6)
//│ | | | | | | | | | | | | | | | | 1. ARGH  DNF(0, )  <!  DNF(0, ~(⊤(‘A77'')))
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider ⊤ <: DNF(0, ~(⊤(‘A77'')))
//│ | | | | | | | | | | | | | | | | | Possible: List(~(⊤(‘A77'')))
//│ | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List()  <!  List(~(⊤(‘A77'')))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  ⊤  %  List(⊤(‘A77''))  <!  List()  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A77'')  %  List()  <!  List()  %  ⊥
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: ⊤ <: ~(⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | normLike[-] ~(⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | norm[-] ~(⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, ~(⊤(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤(‘A77'')
//│ | | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | | | ~> ⊤(‘A77'')
//│ | | | | | | | | | | | | | | | | | | | | | ~> ~(⊤(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | | normLike[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | norm[+] ⊤
//│ | | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | | ~> ⊤
//│ | | | | | | | | | | | | | | | | | | | | CONSTRAIN #error<> <! (α78' | #0<Int,Num,Object>)
//│ | | | | | | | | | | | | | | | | | | | |   where 
//│ 		α78' :> (α91_111' | #0<Int,Num,Object>)
//│ 		α91_111' :> Int
//│ | | | | | | | | | | | | | | | | | | | | 1. C #error<> <! (α78' | #0<Int,Num,Object>)    (0)
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.21: 	  if l is KS(e1) and r is KS(e2) then fr(e1, e2) else 0
//│ ║        	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `~??A`
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.14: 	class KS[A](ev: K[A]) extends K[S[A]]
//│ ╙──      	         ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ | | | | | | | | | | | | | 1. C A58_75' <! ⊥..⊤    (2)
//│ | | | | | | | | | | | | | | 1. C A58_75' <! ⊥    (4)
//│ | | | | | | | | | | | | | | | NEW A58_75' UB (0)
//│ | | | | | | | | | | | | | | | 1. C (⊤(‘A90''') & ~(⊥(‘A77''))) <! ⊥    (6)
//│ | | | | | | | | | | | | | | | | 1. ARGH  DNF(0, {}∧⊤(‘A90''')∧~(⊥(‘A77'')))  <!  DNF(0, )
//│ | | | | | | | | | | | | | | | | | DNF DISCHARGE CONSTRAINTS
//│ | | | | | | | | | | | | | | | | | Consider {}∧⊤(‘A90''') <: DNF(0, {}∧⊥(‘A77''))
//│ | | | | | | | | | | | | | | | | | Possible: List({}∧⊥(‘A77''))
//│ | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A90''')  %  List()  <!  List(⊥(‘A77''))  %  ⊥
//│ | | | | | | | | | | | | | | | | | | 1. A  {}∧⊤(‘A90''')  %  List()  <!  List()  %  ⊥(‘A77'')
//│ | | | | | | | | | | | | | | | | | | | Tag checking TreeSet(⊤(‘A90''')) List(⊥(‘A77''))
//│ | | | | | | | | | | | | | | | | | | | CONSTRAINT FAILURE: (⊤(‘A90''') & ~(⊥(‘A77''))) <: ⊥
//│ | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | normLike[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | norm[-] ⊥
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, )
//│ | | | | | | | | | | | | | | | | | | | | ~> ⊥
//│ | | | | | | | | | | | | | | | | | | | allVarPols: 
//│ | | | | | | | | | | | | | | | | | | | normLike[+] (⊤(‘A90''') & ~(⊥(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | norm[+] (⊤(‘A90''') & ~(⊥(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | | DNF: DNF(0, {}∧⊤(‘A90''')∧~(⊥(‘A77'')))
//│ | | | | | | | | | | | | | | | | | | | | ~> (⊤(‘A90''') & ~(⊥(‘A77'')))
//│ | | | | | 1. : (α78' | #0<Int,Num,Object>)
//│ | | | | 1. : (α78' | #0<Int,Num,Object>)
//│ | | | 1. : (α78' | #0<Int,Num,Object>)
//│ | | 1. : ((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>))
//│ | | CONSTRAIN ((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>)) <! fr115'
//│ | |   where 
//│ 		α78' :> (α91_111' | #0<Int,Num,Object>)
//│ 		α91_111' :> Int
//│ | | 1. C ((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>)) <! fr115'    (0)
//│ | | | NEW fr115' LB (1)
//│ | Completed TypedNuFun(0,NuFunDef(None,Var(fr),None,List(TypeName(L)),Left(Lam(Tup(List((Some(Var(l)),Fld(_,TyApp(Var(K),List(TypeName(L))))), (Some(Var(r)),Fld(_,TyApp(Var(K),List(TypeName(L))))))),Blk(List(If(IfThen(App(Var(and),Tup(List((None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(l))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e1))))))))))))), (None,Fld(_,App(Var(is),Tup(List((None,Fld(_,Var(r))), (None,Fld(_,App(Var(KS),Tup(List((None,Fld(_,Var(e2)))))))))))))))),App(Var(fr),Tup(List((None,Fld(_,Var(e1))), (None,Fld(_,Var(e2))))))),Some(IntLit(0)))))))),((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>))) where 
//│ 		α78' :> (α91_111' | #0<Int,Num,Object>)
//│ 		α91_111' :> Int
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>))› <! ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)››
//│ |   where 
//│ 		α78' :> (α91_111' | #0<Int,Num,Object>)
//│ 		α91_111' :> Int
//│ | 0. C ‹∀ 0. ((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>))› <! ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)››    (0)
//│ | | BUMP TO LEVEL 1  -->  ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›
//│ | | where 
//│ | | 1. C ‹∀ 0. ((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>))› <! ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›    (2)
//│ | | | New skolem: 'L71' ~> ‘L116''
//│ | | | BUMP TO LEVEL 2  -->  ((K[‘L116''], K[‘L116''],) -> Int)
//│ | | | where 
//│ | | | 2. C ‹∀ 0. ((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>))› <! ((K[‘L116''], K[‘L116''],) -> Int)    (4)
//│ | | | | INST [0]   ‹∀ 0. ((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>))›
//│ | | | |   where  
//│ 		α78' :> (α91_111' | #0<Int,Num,Object>)
//│ 		α91_111' :> Int
//│ | | | | TO [2] ~>  ((l: K[L73_117''], r: K[L73_117''],) -> (α78_118'' | #0<Int,Num,Object>))
//│ | | | |   where  
//│ 		α78_118'' :> (α91_119'' | #0<Int,Num,Object>)
//│ 		α91_119'' :> Int
//│ | | | | 2. C ((l: K[L73_117''], r: K[L73_117''],) -> (α78_118'' | #0<Int,Num,Object>)) <! ((K[‘L116''], K[‘L116''],) -> Int)    (6)
//│ | | | | | 2. C (K[‘L116''], K[‘L116''],) <! (l: K[L73_117''], r: K[L73_117''],)    (4)
//│ | | | | | | 2. C K[‘L116''] <! K[L73_117'']    (5)
//│ | | | | | | | 2. C ‘L116'' <! L73_117''    (6)
//│ | | | | | | | | NEW L73_117'' LB (2)
//│ | | | | | | | 2. C L73_117'' <! ‘L116''    (6)
//│ | | | | | | | | NEW L73_117'' UB (2)
//│ | | | | | | | | 2. C ‘L116'' <! ‘L116''    (9)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | 2. C K[‘L116''] <! K[L73_117'']    (5)
//│ | | | | | | | Cached!
//│ | | | | | 2. C (α78_118'' | #0<Int,Num,Object>) <! Int    (4)
//│ | | | | | | 2. C α78_118'' <! Int    (7)
//│ | | | | | | | NEW α78_118'' UB (0)
//│ | | | | | | | 2. C (α91_119'' | #0<Int,Num,Object>) <! Int    (10)
//│ | | | | | | | | 2. C α91_119'' <! Int    (13)
//│ | | | | | | | | | NEW α91_119'' UB (0)
//│ | | | | | | | | | 2. C Int <! Int    (16)
//│ | | | | | | | | | | Already a subtype by <:<
//│ | | | | | | | | 2. C #0<Int,Num,Object> <! Int    (13)
//│ | | | | | | | | | Already a subtype by <:<
//│ | | | | | | 2. C #0<Int,Num,Object> <! Int    (7)
//│ | | | | | | | Already a subtype by <:<
//│ | | | UNSTASHING...
//│ | | UNSTASHING...
//│ | CHECKING SUBSUMPTION...
//│ | CONSTRAIN ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›› <! ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)››
//│ |   where 
//│ | 0. C ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›› <! ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)››    (0)
//│ | | Already a subtype by <:<
//│ | Typing unit statements
//│ | : None
//│ ======== TYPED ========
//│ fun fr: ‹∀ 0. ((l: K[‘L73'], r: K[‘L73'],) -> (α78' | #0<Int,Num,Object>))› where 
//│ |		α78' :> (α91_111' | #0<Int,Num,Object>)
//│ |		α91_111' :> Int
//│ fun fr: ‹∀ 0. ‹∀ 0. ((K['L71'], K['L71'],) -> Int)›› where 
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

:e
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(l, e2) else 0
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.736: 	  if l is KS(e1) and r is KS(e2) then fr(l, e2) else 0
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `S[in A & ?A out A | ?A0] | L | ~??A`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.734: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	           ^^
//│ ╟── from type variable:
//│ ║  l.734: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	                  ^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.14: 	class KS[A](ev: K[A]) extends K[S[A]]
//│ ╙──      	         ^
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

// FIXedME
:e
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(l, e1) else 0
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.757: 	  if l is KS(e1) and r is KS(e2) then fr(l, e1) else 0
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `S[in ??A & ?A out ?A0] | L | ~??A`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.755: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	           ^^
//│ ╟── from type variable:
//│ ║  l.755: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	                  ^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.14: 	class KS[A](ev: K[A]) extends K[S[A]]
//│ ╙──      	         ^
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

:e
fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(l, e1) else 0
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.777: 	  if l is KS(e1) and r is KS(e2) then fr(l, e1) else 0
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `S[in ??A & ?A out ?A0] | L | ~??A`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.775: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	           ^^
//│ ╟── from type variable:
//│ ║  l.775: 	fun fr: (K['L], K['L]) -> Int
//│ ║         	                  ^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.14: 	class KS[A](ev: K[A]) extends K[S[A]]
//│ ╙──      	         ^
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

fun fr: (K['L], K['L]) -> Int
fun fr[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fr(l, r) else 0
//│ fun fr: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fr: forall 'L0. (K['L0], K['L0]) -> Int

fun fk: (K['L], K['L]) -> Int
fun fk[L](l: K[L], r: K[L]) =
  if l is KS(e1) and r is KS(e2) then fk((e1 : K[e1.T]), (e2 : K[e2.T])) else 0
//│ fun fk: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fk: forall 'L0. (K['L0], K['L0]) -> Int

fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then 
    let xw: K[eb.T] = ea : K[ea.T]; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0

:re
fk((error : K[S[S[nothing]]]), (error : K[S[S[nothing]]]))
//│ Int
//│ res
//│ Runtime error:
//│   Error: an error was thrown

:e
fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.820: 	fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `S[nothing]` does not match type `nothing`
//│ ║  l.820: 	fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ║         	                ^^^^^^^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.820: 	fk((error : K[S[S[nothing]]]), (error : K[S[nothing]]))
//│ ╙──       	                                            ^^^^^^^
//│ Int | error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

// * with alt

abstract class K[type T]: KZ | KS[?]
class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?] | KZ
//│ class KZ() extends K
//│ class KS[A](ev: K[A]) extends K

fun get[A](x: K[S[A]]): K[A] = if x is KS(m) then m : K[x.T.P] else error
//│ fun get: forall 'A. (x: K[S['A]]) -> K['A]

fun fk: (K['L], K['L]) -> Int
fun fk[L](l: K[L], r: K[L]): Int =
  if l is KS(ep) and r is KS(eq) then 1 + fk(ep, eq) else 0
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.849: 	  if l is KS(ep) and r is KS(eq) then 1 + fk(ep, eq) else 0
//│ ║         	                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `??A & ~??A0` does not match type `~??A1`
//│ ║  l.847: 	fun fk: (K['L], K['L]) -> Int
//│ ╙──       	           ^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.849: 	  if l is KS(ep) and r is KS(eq) then 1 + fk(ep, eq) else 0
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `~??A`
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.847: 	fun fk: (K['L], K['L]) -> Int
//│ ║         	                  ^^
//│ ╟── from type variable:
//│ ║  l.847: 	fun fk: (K['L], K['L]) -> Int
//│ ║         	           ^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.839: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ fun fk: forall 'L. (l: K['L], r: K['L]) -> Int
//│ fun fk: forall 'L0. (K['L0], K['L0]) -> Int

fk(KS(KS(KZ())), KS(KS(KZ())))
//│ Int
//│ res
//│     = 2

:e
fk(KS(KS(KZ())), KS(KZ()))
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.880: 	fk(KS(KS(KZ())), KS(KZ()))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?A]`
//│ ║  l.838: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.839: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ║         	                                     ^^^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.839: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ Int | error
//│ res
//│     = 1

fun fi[L](x: K[L]): K[L] = if x is 
    KZ() then KZ() : K[x.T]
    KS(ea) then KS(ea) : K[x.T]
//│ fun fi: forall 'L. (x: K['L]) -> K['L]

fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[ea.T] = ea ; 0
  else 0
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> 0

fun fz[L](l: KS[L], r: KS[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt: K[eb.T] = ea : K[ea.T] ; 0
  else 0
//│ fun fz: forall 'L. (l: KS['L], r: KS['L]) -> 0

fun fz[L](l: K[L], r: K[L]) =
  if l is KS(ea) and r is KS(eb) then
    let zt = ea : K[eb.T] ; 0
  else error
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.915: 	  if l is KS(ea) and r is KS(eb) then
//│ ║         	                     ^^^^^^^^^^^^^^^^
//│ ║  l.916: 	    let zt = ea : K[eb.T] ; 0
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.917: 	  else error
//│ ║         	^^^^^^^^^^^^
//│ ╟── type `S[?] & ??A & ~??A0` does not match type `Z | ~??A1`
//│ ║  l.916: 	    let zt = ea : K[eb.T] ; 0
//│ ╙──       	                      ^^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ ╔══[ERROR] Type mismatch in `case` expression:
//│ ║  l.915: 	  if l is KS(ea) and r is KS(eb) then
//│ ║         	     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.916: 	    let zt = ea : K[eb.T] ; 0
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.917: 	  else error
//│ ║         	^^^^^^^^^^^^
//│ ╟── expression of type `anything` does not match type `S[?] | ~??A`
//│ ╟── Note: constraint arises from type selection:
//│ ║  l.916: 	    let zt = ea : K[eb.T] ; 0
//│ ║         	                      ^^
//│ ╟── Note: type parameter A is defined at:
//│ ║  l.839: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ╙──       	              ^
//│ TEST CASE FAILURE: There was an unexpected type error
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> (0 | error)

fun fz[L](l: K[L], r: K[L]): K[L] =
  if l is KS(ea) and r is KS(eb) 
    then (KS(eb) : K[r.T]) : K[l.T]
    else error
//│ fun fz: forall 'L. (l: K['L], r: K['L]) -> K['L]

abstract class Eq[type A, type B]: Refl[A]
class Refl[A]() extends Eq[A, A]
//│ abstract class Eq[A, B]: Refl[A]
//│ class Refl[A]() extends Eq

fun conv[L, A](x: K[L], ev: Eq[L, S[A]]): K[S[A]] =
  if ev is Refl() then (x as K[ev.A]) as K[ev.B]
//│ fun conv: forall 'L 'A. (x: K['L], ev: Eq['L, S['A]]) -> K[S['A]]

conv(KS(KZ()), Refl())
//│ K[S[Z]]
//│ res
//│     = KS {}

:e
conv(KZ(), Refl())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.967: 	conv(KZ(), Refl())
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?A]`
//│ ║  l.838: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.957: 	fun conv[L, A](x: K[L], ev: Eq[L, S[A]]): K[S[A]] =
//│ ╙──       	                                  ^^^^
//│ K[S['A]] | error
//│ res
//│     = KZ {}

fun extr[L, H](x: K[L], ev: Eq[L, S[H]]): K[H] =
  let y: K[S[ev.B.P]] = x : K[ev.B]
  if y is KS(m) then m : K[y.T.P] else error
//│ fun extr: forall 'L 'H. (x: K['L], ev: Eq['L, S['H]]) -> K['H]

fun extr[L, H](x: K[L], ev: Eq[L, S[H]]): K[H] = get(x : K[ev.B])
//│ fun extr: forall 'L 'H. (x: K['L], ev: Eq['L, S['H]]) -> K['H]

extr(KS(KZ()), Refl())
//│ K[Z]
//│ res
//│     = KZ {}

:e
extr(KZ(), Refl())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.995: 	extr(KZ(), Refl())
//│ ║         	^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?H]`
//│ ║  l.838: 	class KZ() extends K[Z]
//│ ║         	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.986: 	fun extr[L, H](x: K[L], ev: Eq[L, S[H]]): K[H] = get(x : K[ev.B])
//│ ╙──       	                                  ^^^^
//│ K['H] | error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

abstract class K[type T]: (KZ | KS[?]) {
  fun m: Eq[T, S['A]] -> Int
  fun m(ev) = if ev is Refl() then 0
  fun n: T -> T
  fun n(x) = x
}
class KZ() extends K[Z]
class KS[type A](ev: K[A]) extends K[S[A]]
//│ abstract class K[T]: KS[?] | KZ {
//│   fun m: forall 'A. Eq[T, S['A]] -> Int
//│   fun n: T -> T
//│ }
//│ class KZ() extends K {
//│   fun m: forall 'A0. Eq['T, S['A0]] -> Int
//│   fun n: 'T -> 'T
//│ }
//│ class KS[A](ev: K[A]) extends K {
//│   fun m: forall 'A1. Eq['T0, S['A1]] -> Int
//│   fun n: 'T0 -> 'T0
//│ }
//│ where
//│   'T0 := S[A]
//│   'T := Z

KS(KZ()).n(new S : S[Z])
KZ().n(new Z)
//│ Z
//│ res
//│     = S {}
//│ res
//│     = Z {}

:e
KS(KZ()).n(new Z)
KZ().n(new S : S[Z])
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1043: 	KS(KZ()).n(new Z)
//│ ║          	^^^^^^^^^^^^^^^^^
//│ ╟── application of type `Z` is not an instance of `S[?A]`
//│ ║  l.1043: 	KS(KZ()).n(new Z)
//│ ║          	               ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.1017: 	class KS[type A](ev: K[A]) extends K[S[A]]
//│ ║          	                                     ^^^^
//│ ╟── Note: type parameter T is defined at:
//│ ║  l.1010: 	abstract class K[type T]: (KZ | KS[?]) {
//│ ╙──        	                      ^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1044: 	KZ().n(new S : S[Z])
//│ ║          	^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `S[Z]` is not an instance of `Z`
//│ ║  l.1044: 	KZ().n(new S : S[Z])
//│ ║          	               ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.1016: 	class KZ() extends K[Z]
//│ ║          	                     ^
//│ ╟── Note: type parameter T is defined at:
//│ ║  l.1010: 	abstract class K[type T]: (KZ | KS[?]) {
//│ ╙──        	                      ^
//│ Z | error
//│ res
//│     = Z {}
//│ res
//│     = S {}

KS(KZ()).m(Refl())
//│ Int
//│ res
//│     = 0

:e
KZ().m(Refl())
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.1081: 	KZ().m(Refl())
//│ ║          	^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S['A]`
//│ ║  l.1016: 	class KZ() extends K[Z]
//│ ║          	                     ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.1011: 	  fun m: Eq[T, S['A]] -> Int
//│ ╙──        	               ^^^^^
//│ Int | error
//│ res
//│     = 0

class C[type A]()
//│ class C[A]()

fun test(k) =
  let f(x) = let c = C() in [k(c), c]
  f
//│ fun test: forall 'A 'A0 'a. (C[in 'A out 'A | 'A0] -> 'a) -> (forall 'A1. anything -> ['a, C['A1]])
//│   where
//│     'A1 :> 'A
//│         <: 'A0

class C[A, in B, out C]() { fun f: [A, B] -> [A, C] = f }
//│ class C[A, B, C]() {
//│   fun f: (A, B) -> [A, C]
//│ }

fun test(k) =
  let f(x) = let c = C() in [k(c), c]
  f
//│ fun test: forall 'A 'A0 'a. (C[in 'A out 'A | 'A0, anything, nothing] -> 'a) -> (forall 'A1. anything -> ['a, C['A1, anything, nothing]])
//│   where
//│     'A1 :> 'A
//│         <: 'A0








