:NewDefs
:GADTs

// natural numbers for index //

class Z
class S[type P]
//│ class Z {
//│   constructor()
//│ }
//│ class S[P] {
//│   constructor()
//│ }

// sized list //

abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
class Nil[T] extends Vec[Z, T]
class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ abstract class Vec[L, T]: Cons[in S[in anything out nothing] out S[?], T] | Nil[T]
//│ class Nil[T] extends Vec {
//│   constructor()
//│ }
//│ class Cons[L, T](h: T, t: Vec[L, T]) extends Vec

// functions //

fun head[T](xs: Vec[S['l], T]): T =
    if xs is Cons(h, t) then h : xs.T else error
//│ fun head: forall 'l 'T. (xs: Vec[S['l], 'T]) -> 'T

fun tail[L, T](xs: Vec[S[L], T]): Vec[L, T] =
    if xs is Cons(h, t) then t : Vec[xs.L.P, xs.T] else error
//│ fun tail: forall 'L 'T. (xs: Vec[S['L], 'T]) -> Vec['L, 'T]

fun len: Vec['l, 'a] -> Int
fun len(xs) = if xs is
    Nil then 0
    Cons(h, t) then 1 + len(t : Vec[xs.L.P, xs.T])
//│ fun len: (Cons[in anything out nothing, in anything out nothing] | Nil[in anything out nothing]) -> Int
//│ fun len: forall 'l 'a. Vec['l, 'a] -> Int

fun map: ('A -> 'B, Vec['L, 'A]) -> Vec['L, 'B]
fun map[B](f, xs) = if xs is
    Nil then new Nil : Vec[xs.L, B]
    Cons(h, t) then Cons(f(h), map(f, t)) : Vec[xs.L, B]
//│ ╔══[ERROR] Type mismatch in definition:
//│ ║  l.44: 	fun map[B](f, xs) = if xs is
//│ ║        	    ^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.45: 	    Nil then new Nil : Vec[xs.L, B]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.46: 	    Cons(h, t) then Cons(f(h), map(f, t)) : Vec[xs.L, B]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` does not match type `'L | ~Z`
//│ ║  l.18: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── but it flows into type selection with expected type `'L | ~Z`
//│ ║  l.45: 	    Nil then new Nil : Vec[xs.L, B]
//│ ║        	                             ^^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.43: 	fun map: ('A -> 'B, Vec['L, 'A]) -> Vec['L, 'B]
//│ ╙──      	                                        ^^
//│ fun map: forall 'L 'T 'B 'L0. ((??T & 'T) -> 'B, Cons[in 'L0 out 'L, in 'T out nothing] & {Cons#L :> 'L <: 'L0} | Nil[in anything out nothing]) -> Vec[out S[in 'L & 'L0 | ??L out ??L0 & 'L0] | Z, 'B]
//│ fun map: forall 'A 'B0 'L1. ('A -> 'B0, Vec['L1, 'A]) -> Vec['L1, 'B0]

fun zip: (Vec['L, 'A], Vec['L, 'B]) -> Vec['L, ['A, 'B]]
fun zip[A, B](xs, ys) = 
    if xs is Nil and ys is Nil then new Nil : Vec[xs.L, [A, B]]
    else if xs is Cons(x, tx) and ys is Cons(y, ty) then 
        Cons([x, y], zip(tx, ty)) : Vec[xs.L, [A, B]]
    else error
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.69: 	    else if xs is Cons(x, tx) and ys is Cons(y, ty) then 
//│ ║        	                                  ^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.70: 	        Cons([x, y], zip(tx, ty)) : Vec[xs.L, [A, B]]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `T & ?T` does not match type `B`
//│ ║  l.19: 	class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ║        	                     ^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.66: 	fun zip: (Vec['L, 'A], Vec['L, 'B]) -> Vec['L, ['A, 'B]]
//│ ║        	                                                    ^^
//│ ╟── from reference:
//│ ║  l.70: 	        Cons([x, y], zip(tx, ty)) : Vec[xs.L, [A, B]]
//│ ╙──      	                 ^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.68: 	    if xs is Nil and ys is Nil then new Nil : Vec[xs.L, [A, B]]
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.69: 	    else if xs is Cons(x, tx) and ys is Cons(y, ty) then 
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.70: 	        Cons([x, y], zip(tx, ty)) : Vec[xs.L, [A, B]]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.71: 	    else error
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── field selection of type `T & ?T` does not match type `A`
//│ ║  l.19: 	class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ║        	                     ^
//│ ╟── Note: constraint arises from type variable:
//│ ║  l.66: 	fun zip: (Vec['L, 'A], Vec['L, 'B]) -> Vec['L, ['A, 'B]]
//│ ║        	                                                ^^
//│ ╟── from reference:
//│ ║  l.70: 	        Cons([x, y], zip(tx, ty)) : Vec[xs.L, [A, B]]
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in definition:
//│ ║  l.67: 	fun zip[A, B](xs, ys) = 
//│ ║        	    ^^^^^^^^^^^^^^^^^^^^
//│ ║  l.68: 	    if xs is Nil and ys is Nil then new Nil : Vec[xs.L, [A, B]]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.69: 	    else if xs is Cons(x, tx) and ys is Cons(y, ty) then 
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.70: 	        Cons([x, y], zip(tx, ty)) : Vec[xs.L, [A, B]]
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.71: 	    else error
//│ ║        	^^^^^^^^^^^^^^
//│ ╟── expression of type `??L & ~??L0` is not an instance of type `S`
//│ ╟── Note: constraint arises from class tag:
//│ ║  l.17: 	abstract class Vec[type L, type T]: Nil[T] | Cons[S, T]
//│ ╙──      	                                                  ^
//│ fun zip: forall 'L 'A 'B. (Cons[in anything out 'L, in anything out nothing] | Nil[in anything out nothing] | Object & ~#Cons & ~#Nil, Cons[in 'L | ??L | ~??L0 out ??L1 & ~??L2, in anything out nothing] & {Cons#L :> ??L1 & ~??L2 <: 'L | ??L | ~??L0} | Nil[in anything out nothing] | Object & ~#Cons & ~#Nil) -> (Vec[Z, ['A, 'B]] | error)
//│ fun zip: forall 'L0 'A0 'B0. (Vec['L0, 'A0], Vec['L0, 'B0]) -> Vec['L0, ['A0, 'B0]]

fun sum: Vec['l, Int] -> Int
fun sum(xs) = if xs is
    Nil then 0
    Cons(h, t) then h + sum(t)
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.123: 	fun sum(xs) = if xs is
//│ ║         	                 ^^^^^
//│ ║  l.124: 	    Nil then 0
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.125: 	    Cons(h, t) then h + sum(t)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `T & ?T` is not an instance of type `Int`
//│ ║  l.19: 	class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ║        	                     ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.125: 	    Cons(h, t) then h + sum(t)
//│ ╙──       	                    ^
//│ fun sum: (Cons[in anything out nothing, in anything out nothing] | Nil[in anything out nothing]) -> (Int | error)
//│ fun sum: forall 'l. Vec['l, Int] -> Int

// construct lisp style list lol
// fun toList: (Vec['l, 'a]) -> (['a, 'xs] as 'xs)
fun toList: (((Vec['l, 'a]) -> 'xs) where ['a, 'xs] | [] : 'xs)
fun toList(xs) = if xs is
    Nil then []
    Cons(h, t) then [h, toList(t)]
//│ fun toList: forall 'T. (Cons[in anything out nothing, in 'T out nothing] | Nil[in anything out nothing]) -> Array[forall 'xs. 'xs | ??T & 'T]
//│ fun toList: forall 'l 'a 'xs0. Vec['l, 'a] -> 'xs0
//│ where
//│   'xs0 :> Array['a | 'xs0]
//│   'xs :> Array['xs | ??T & 'T]

:e
head(new Nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.155: 	head(new Nil)
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S['l]`
//│ ║  l.18: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.28: 	fun head[T](xs: Vec[S['l], T]): T =
//│ ╙──      	                    ^^^^^
//│ error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

:e
tail(new Nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.171: 	tail(new Nil)
//│ ║         	^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?L]`
//│ ║  l.18: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.32: 	fun tail[L, T](xs: Vec[S[L], T]): Vec[L, T] =
//│ ╙──      	                       ^^^^
//│ Vec['L, 'T] | error
//│ res
//│ Runtime error:
//│   Error: an error was thrown

head(Cons(1, Cons(2, new Nil)))
//│ 1 | 2
//│ res
//│     = 1

tail(Cons(1, Cons(2, new Nil)))
//│ Vec[S[Z], 'T]
//│   where
//│     'T :> 1 | 2
//│ res
//│     = Cons {}

len(new Nil)
//│ Int
//│ res
//│     = 0

len(Cons(1, Cons(2, new Nil)))
//│ Int
//│ res
//│     = 2

:e
zip(Cons(1, new Nil), new Nil)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.209: 	zip(Cons(1, new Nil), new Nil)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── type `Z` is not an instance of `S[?L]`
//│ ║  l.18: 	class Nil[T] extends Vec[Z, T]
//│ ║        	                         ^
//│ ╟── Note: constraint arises from applied type reference:
//│ ║  l.19: 	class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ║        	                                                         ^^^^
//│ ╟── from type variable:
//│ ║  l.66: 	fun zip: (Vec['L, 'A], Vec['L, 'B]) -> Vec['L, ['A, 'B]]
//│ ╙──      	                           ^^
//│ Vec[out S[Z] | Z, ['A, 'B]] | error
//│   where
//│     'A :> 1
//│ res
//│ Runtime error:
//│   Error: an error was thrown

zip(Cons(1, new Nil), Cons(2, new Nil))
//│ Vec[S[Z], ['A, 'B]]
//│   where
//│     'B :> 2
//│     'A :> 1
//│ res
//│     = Cons {}

let vec1 = Cons(1, Cons(2, Cons(3, new Nil)))
//│ let vec1: Cons[S[S[Z]], 'T]
//│   where
//│     'T :> 1 | 2 | 3
//│ vec1
//│      = Cons {}

vec1 : Vec['l, Int]
//│ Vec[S[S[S[Z]]], Int]
//│ res
//│     = Cons {}

:e
vec1 : Vec[Z, Int]
//│ ╔══[ERROR] Type mismatch in type ascription:
//│ ║  l.250: 	vec1 : Vec[Z, Int]
//│ ║         	^^^^
//│ ╟── type `S[?L]` is not an instance of `Z`
//│ ║  l.19: 	class Cons[L, T](val h: T, val t: Vec[L, T]) extends Vec[S[L], T]
//│ ║        	                                                         ^^^^
//│ ╟── Note: constraint arises from type reference:
//│ ║  l.250: 	vec1 : Vec[Z, Int]
//│ ╙──       	           ^
//│ Vec[Z, Int]
//│ res
//│     = Cons {}

map(x => x * 2, vec1)
//│ Vec[S[S[S[Z]]], 'B]
//│   where
//│     'B :> Int
//│ res
//│     = Cons {}

sum(vec1)
//│ Int
//│ res
//│     = 6

toList(vec1)
//│ forall 'xs. 'xs
//│   where
//│     'xs :> Array[Int | 'xs]
//│ res
//│     = [ 1, [ 2, [ 3, [] ] ] ]
