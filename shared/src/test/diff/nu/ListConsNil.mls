:NewDefs



type List[out A] = Cons[A] | Nil
class Cons[out A](head: A, tail: List[A]) {
  fun size : Int
  fun size = 1 + tail.size
}
module Nil { fun size = 0 }
//│ type List[A] = Cons[A] | Nil
//│ class Cons[A](head: A, tail: List[A]) {
//│   fun size: Int
//│ }
//│ module Nil {
//│   fun size: 0
//│ }



// TODO should better simplify these types (reduce the List refinement)

:ng
let test0: Cons[Int] & List[Num]
let test1: Nil & List[Int]
//│ let test0: Cons[Int] & List[Num]
//│ let test1: Nil & List[Int]



fun list_assoc(s, l) =
  if l is
    Cons(h, t) then
      if eq(s)(h._1) then Cons(h._2, Nil)
      else list_assoc(s, t)
    Nil then Nil
//│ ╔══[ERROR] Type `A` does not contain member `_2`
//│ ║  l.34: 	      if eq(s)(h._1) then Cons(h._2, Nil)
//│ ╙──      	                                ^^^
//│ fun list_assoc: (anything, Cons[anything] | Nil) -> (Cons[error] | Nil | error)

fun test(x, l) = list_assoc(42, Cons(x, l))
//│ fun test: (anything, List[anything]) -> (Cons[error] | Nil | error)

fun test(x, l) = if l is
  Nil then list_assoc(42, Cons(x, l))
  Cons(h, t) then list_assoc(42, Cons(h, t))
//│ fun test: (anything, Cons[anything] | Nil) -> (Cons[error] | Nil | error)



