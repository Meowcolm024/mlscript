:NewDefs


class Add<E>(lhs: E, rhs: E)
class Lit(n: Int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(n: Int)


mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: (??E & 'E) -> Int}
//│   fun eval: (Add['E] | Lit) -> Int
//│ }


class Neg<A>(expr: A)
//│ class Neg[A](expr: A)


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: (??A & 'A) -> Int}
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> (Int | 'b)
//│ }


mixin EvalNegNeg {
  fun eval(e) =
    if e is Neg(Neg(d)) then this.eval(d)
    else super.eval(e)
}
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	    else super.eval(e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Object`
//│ ║  l.22: 	class Neg<A>(expr: A)
//│ ║        	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║        	                ^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	    else super.eval(e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ╙──      	                ^^^^^^
//│ mixin EvalNegNeg() {
//│   super: {eval: (Neg[??A & 'A] | 'a) -> 'b}
//│   this: {eval: (??A0 & ??A1) -> 'b}
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> (error | 'b)
//│ }


module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#E`
//│ ║  l.4: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.12: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.13: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.14: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.22: 	class Neg<A>(expr: A)
//│ ║        	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	    else super.eval(e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#E`
//│ ║  l.4: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.12: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.13: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.14: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.22: 	class Neg<A>(expr: A)
//│ ║        	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	    else super.eval(e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??E` does not contain member `Add#E`
//│ ║  l.4: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.12: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.13: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.14: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.66: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Object`
//│ ║  l.4: 	class Add<E>(lhs: E, rhs: E)
//│ ║       	                     ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	    else super.eval(e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ╙──      	       ^
//│ module TestLang {
//│   fun eval: (Add[anything] | Lit | Neg[anything]) -> (Int | error)
//│ }


fun mk(n) = if n is
  0 then Lit(3)
  1 then Neg(mk(n - 1))
  _ then Add(mk(n - 1), mk(n - 1))
//│ fun mk: forall 'E. (0 | 1 | Int & ~0 & ~1) -> 'E
//│   where
//│     'E :> Add['E] | Lit | Neg['E]

TestLang.eval(mk(0))
//│ Int | error
//│ res
//│     = 3

TestLang.eval(mk(11))
//│ Int | error
//│ res
//│     = -3072



module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#E`
//│ ║  l.4: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.12: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.13: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.14: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.22: 	class Neg<A>(expr: A)
//│ ║        	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	    else super.eval(e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#E`
//│ ║  l.4: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.12: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.13: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.14: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.22: 	class Neg<A>(expr: A)
//│ ║        	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	    else super.eval(e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??E` does not contain member `Add#E`
//│ ║  l.4: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──     	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.12: 	    if e is
//│ ║        	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.12: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.13: 	      Lit(n) then n: Int
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.14: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.29: 	    else super.eval(e)
//│ ╙──      	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.245: 	module TestLang extends EvalBase, EvalNeg, EvalNegNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Object`
//│ ║  l.4: 	class Add<E>(lhs: E, rhs: E)
//│ ║       	                     ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.41: 	    else super.eval(e)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.40: 	    if e is Neg(Neg(d)) then this.eval(d)
//│ ╙──      	       ^
//│ module TestLang {
//│   fun eval: (Add[anything] | Lit | Neg[anything]) -> (Int | error)
//│ }


fun mk(n) = if n is
  0 then Lit(3)
  1 then Neg(mk(n - 1))
  _ then Add(mk(n - 1), mk(n - 1))
//│ fun mk: forall 'E. (0 | 1 | Int & ~0 & ~1) -> 'E
//│   where
//│     'E :> Add['E] | Lit | Neg['E]

TestLang.eval(mk(0))
//│ Int | error
//│ res
//│     = 3

TestLang.eval(mk(11))
//│ Int | error
//│ res
//│     = -3072

