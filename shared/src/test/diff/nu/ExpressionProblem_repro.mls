:NewDefs
:NoJS


class Add0<E>(lhs: E)
//│ class Add0[E](lhs: E)

fun eval(e) = if e is Add0(l) then eval(l)
//│ fun eval: forall 'E. Add0['E] -> nothing
//│   where
//│     'E <: Add0['E] | ~??E


class Add<E>(lhs: E, rhs: E)
class Lit(val value: Int)
//│ class Add[E](lhs: E, rhs: E)
//│ class Lit(value: Int)

let add11 = Add(Lit(1), Lit(2))
//│ let add11: Add[Lit]

fun eval(e) =
  if e is
    Lit(n) then n: Int
    Add(l, r) then eval(l) + eval(r)
//│ fun eval: forall 'E. (Add['E] | Lit) -> Int
//│   where
//│     'E <: Add['E] | Lit | ~??E


mixin EvalLit {
  fun eval(e) =
    if e is
      Lit(n) then n
}
//│ mixin EvalLit() {
//│   fun eval: Lit -> Int
//│ }

mixin EvalLit {
  fun eval(e: Lit) = e.value
}
//│ mixin EvalLit() {
//│   fun eval: (e: Lit) -> Int
//│ }


mixin EvalAdd {
  fun eval(e) =
    if e is
      Add(l, r) then this.eval(l)
}
//│ mixin EvalAdd() {
//│   this: {eval: (??E & 'E) -> 'a}
//│   fun eval: Add['E] -> 'a
//│ }

module TestLang extends EvalAdd
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.58: 	module TestLang extends EvalAdd
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Add`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ║        	             ^^^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.51: 	      Add(l, r) then this.eval(l)
//│ ║        	      ^^^
//│ ╟── from reference:
//│ ║  l.50: 	    if e is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type `??E` does not contain member `Add#E`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──      	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.58: 	module TestLang extends EvalAdd
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` does not have field 'Add#E'
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ║        	             ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.50: 	    if e is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.58: 	module TestLang extends EvalAdd
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Object`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ║        	             ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.50: 	    if e is
//│ ║        	       ^^^^
//│ ║  l.51: 	      Add(l, r) then this.eval(l)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.50: 	    if e is
//│ ╙──      	       ^
//│ module TestLang {
//│   fun eval: Add[anything] -> nothing
//│ }

TestLang.eval
//│ Add[anything] -> nothing



mixin EvalBase {
  fun eval(e) =
    if e is
      Lit(n) then n: Int
      Add(l, r) then this.eval(l) + this.eval(r)
}
//│ mixin EvalBase() {
//│   this: {eval: (??E & 'E) -> Int}
//│   fun eval: (Add['E] | Lit) -> Int
//│ }


module TestLang extends EvalBase
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.118: 	module TestLang extends EvalBase
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ║        	                     ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.108: 	    if e is
//│ ╙──       	       ^
//│ ╔══[ERROR] Type `??E` does not contain member `Add#E`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──      	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.118: 	module TestLang extends EvalBase
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` does not match type `Add[?E0] & {Add#E :> ?E1 <: ?E0} | Lit`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ║        	                     ^^^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.108: 	    if e is
//│ ╙──       	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.118: 	module TestLang extends EvalBase
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Object`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ║        	                     ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.108: 	    if e is
//│ ║         	       ^^^^
//│ ║  l.109: 	      Lit(n) then n: Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.110: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.108: 	    if e is
//│ ╙──       	       ^
//│ module TestLang {
//│   fun eval: (Add[anything] | Lit) -> Int
//│ }

TestLang.eval
//│ (Add[anything] | Lit) -> Int



add11
//│ Add[Lit]

TestLang.eval(add11)
//│ Int

add11
//│ Add[Lit]

TestLang.eval(add11)
//│ Int

add11
//│ Add[Lit]



class Neg<A>(expr: A)
//│ class Neg[A](expr: A)

let add2negadd11 = Add(Lit(2), Neg(add11))
//│ let add2negadd11: Add[Lit | Neg[Add[Lit]]]


mixin EvalNeg {
  fun eval(e) =
    if e is Neg(d) then 0 - this.eval(d)
    else super.eval(e)
}
//│ mixin EvalNeg() {
//│   super: {eval: 'a -> 'b}
//│   this: {eval: (??A & 'A) -> Int}
//│   fun eval: (Neg['A] | Object & 'a & ~#Neg) -> (Int | 'b)
//│ }


module TestLang extends EvalBase, EvalNeg
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.201: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.108: 	    if e is
//│ ║         	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.192: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#E`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──      	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.201: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.108: 	    if e is
//│ ║         	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.192: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.201: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.108: 	    if e is
//│ ║         	       ^^^^
//│ ║  l.109: 	      Lit(n) then n: Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.110: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.192: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.201: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.182: 	class Neg<A>(expr: A)
//│ ║         	             ^^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.191: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.192: 	    else super.eval(e)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.191: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ╙──       	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.201: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.108: 	    if e is
//│ ║         	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.192: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??E` does not contain member `Add#E`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ╙──      	          ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.201: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` does not match type `Add[?E] & {Add#E :> ?E0 <: ?E} | Lit`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.108: 	    if e is
//│ ║         	       ^
//│ ╟── from wildcard pattern:
//│ ║  l.192: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.201: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??E & ~#Neg` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.108: 	    if e is
//│ ║         	       ^^^^
//│ ║  l.109: 	      Lit(n) then n: Int
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.110: 	      Add(l, r) then this.eval(l) + this.eval(r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.192: 	    else super.eval(e)
//│ ╙──       	         ^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.201: 	module TestLang extends EvalBase, EvalNeg
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??E & ?E` is not an instance of type `Object`
//│ ║  l.14: 	class Add<E>(lhs: E, rhs: E)
//│ ║        	                     ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.191: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ║         	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.192: 	    else super.eval(e)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.191: 	    if e is Neg(d) then 0 - this.eval(d)
//│ ╙──       	       ^
//│ module TestLang {
//│   fun eval: (Add[anything] | Lit | Neg[anything]) -> Int
//│ }

TestLang.eval
//│ (Add[anything] | Lit | Neg[anything]) -> Int


TestLang.eval(add11)
//│ Int

TestLang.eval(Neg(add11))
//│ Int

TestLang.eval(Add(Lit(2), Neg(Lit(1))))
//│ Int

TestLang.eval(Neg(Neg(add11)))
//│ Int


TestLang.eval(add2negadd11)
//│ Int

TestLang.eval(Add(Lit(2), Neg(add11)))
//│ Int


