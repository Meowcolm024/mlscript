:NewDefs
:NoJS


// * Adapted example from Code reuse through polymorphic variants (FOSE 2000)
// * This time with an ML-style List data type encoding.


// TODO improvements/things to investigate:
//  - constraining loop with unannotated `list_assoc` ascription
//  - still a number of quite ugly types


class List<out A> {
  fun match: forall 'res: (ifNil: () => 'res, ifCons: (A, List[A]) => 'res) => 'res
  fun match = error
}
let Nil: () => List<'a>
let Cons: (head: 'a, tail: List<'a>) => List<'a>
//│ class List[A] {
//│   constructor()
//│   fun match: forall 'res. (ifNil: () -> 'res, ifCons: (A, List[A]) -> 'res) -> 'res
//│ }
//│ let Nil: () -> List[nothing]
//│ let Cons: forall 'a. (head: 'a, tail: List['a]) -> List['a]

module NotFound
class Success<out A>(result: A)
//│ module NotFound
//│ class Success[A](result: A)

fun eq(l: Str, r: Str): Bool
//│ fun eq: (l: Str, r: Str) -> Bool

// * Annotation currently needed to avoid later ascription loop (due to excessive TV refreshing?)
// fun list_assoc(s, l) =
fun list_assoc(s, l: List<'a>) =
  l.match(
    ifNil: () => NotFound,
    ifCons: (h, t) =>
      if eq(s, h._1) then Success(h._2)
      else list_assoc(s, t)
  )
//│ fun list_assoc: forall 'A. (Str, l: List[{_1: Str, _2: 'A}]) -> (NotFound | Success['A])

list_assoc : (Str, List<{ _1: Str, _2: 'b }>) => (NotFound | Success['b])
//│ (Str, List[{_1: Str, _2: 'b}]) -> (NotFound | Success['b])

fun list_assoc(s: Str, l: List<{ _1: Str, _2: 'b }>): NotFound | Success['b]
//│ fun list_assoc: forall 'b. (s: Str, l: List[{_1: Str, _2: 'b}]) -> (NotFound | Success['b])

class Var(s: Str)
//│ class Var(s: Str)

mixin EvalVar {
  fun eval(sub, v) =
    if v is Var(s) then
      if list_assoc(s, sub) is
        NotFound then v
        Success(r) then r
}
//│ mixin EvalVar() {
//│   fun eval: (List[{_1: Str, _2: 'b}], Var) -> (Var | ??A & 'b)
//│ }

class Abs<out A>(x: Str, t: A)
class App<out A>(s: A, t: A)
//│ class Abs[A](x: Str, t: A)
//│ class App[A](s: A, t: A)

fun incr(x: {a: Int}): unit
//│ fun incr: (x: {a: Int}) -> unit

fun gensym(): Str
//│ fun gensym: () -> Str

fun Int_to_string(x: Int): Str
//│ fun Int_to_string: (x: Int) -> Str

mixin EvalLambda {
  fun eval(sub, v) =
    if v is
      App(t1, t2) then
        let l1 = this.eval(sub, t1)
        let l2 = this.eval(sub, t2)
        if t1 is
          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
        else
          App(l1, l2)
      Abs(x, t) then
        let s = gensym()
        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
    else
      super.eval(sub, v)
}
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.82: 	    if v is
//│ ║        	       ^^^^
//│ ║  l.83: 	      App(t1, t2) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	        let l1 = this.eval(sub, t1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	        let l2 = this.eval(sub, t2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	        if t1 is
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Object`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ║        	                 ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.86: 	        if t1 is
//│ ║        	           ^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.86: 	        if t1 is
//│ ╙──      	           ^^
//│ mixin EvalLambda() {
//│   super: {eval: ('b, 'c) -> 'd}
//│   this: {
//│     eval: ('b, ??A & 'A) -> 'e & (List[[Str, 'e]], ??A0 & ??A1) -> 'd & (List['a | [Str, Var]], ??A2 & 'A0) -> 'f
//│   }
//│   fun eval: (List['a] & 'b, Abs['A0] | App['A] | Object & 'c & ~#Abs & ~#App) -> (Abs['f] | App['e] | error | 'd)
//│ }

module Test1 extends EvalVar, EvalLambda
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.136: 	module Test1 extends EvalVar, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Var`
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.57: 	    if v is Var(s) then
//│ ║        	            ^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.136: 	module Test1 extends EvalVar, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.57: 	    if v is Var(s) then
//│ ║        	       ^^^^^^^^^^^^^^^^
//│ ║  l.58: 	      if list_assoc(s, sub) is
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.59: 	        NotFound then v
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.60: 	        Success(r) then r
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `App[anything] & ??A` does not contain member `Abs#A`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type `Abs[anything] & ??A` does not contain member `App#A`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.136: 	module Test1 extends EvalVar, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ║        	                         ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.82: 	    if v is
//│ ║        	       ^^^^
//│ ║  l.83: 	      App(t1, t2) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	        let l1 = this.eval(sub, t1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	        let l2 = this.eval(sub, t2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	        if t1 is
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.90: 	      Abs(x, t) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.91: 	        let s = gensym()
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	    else
//│ ║        	^^^^^^^^
//│ ║  l.94: 	      super.eval(sub, v)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.82: 	    if v is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.136: 	module Test1 extends EvalVar, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Var`
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.57: 	    if v is Var(s) then
//│ ║        	            ^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.136: 	module Test1 extends EvalVar, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.57: 	    if v is Var(s) then
//│ ║        	       ^^^^^^^^^^^^^^^^
//│ ║  l.58: 	      if list_assoc(s, sub) is
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.59: 	        NotFound then v
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.60: 	        Success(r) then r
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `App[anything] & ??A` does not contain member `Abs#A`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type `Abs[anything] & ??A` does not contain member `App#A`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.136: 	module Test1 extends EvalVar, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ║        	                         ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.82: 	    if v is
//│ ║        	       ^^^^
//│ ║  l.83: 	      App(t1, t2) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	        let l1 = this.eval(sub, t1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	        let l2 = this.eval(sub, t2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	        if t1 is
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.90: 	      Abs(x, t) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.91: 	        let s = gensym()
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	    else
//│ ║        	^^^^^^^^
//│ ║  l.94: 	      super.eval(sub, v)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.82: 	    if v is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.136: 	module Test1 extends EvalVar, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Var`
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.57: 	    if v is Var(s) then
//│ ║        	            ^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.136: 	module Test1 extends EvalVar, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.57: 	    if v is Var(s) then
//│ ║        	       ^^^^^^^^^^^^^^^^
//│ ║  l.58: 	      if list_assoc(s, sub) is
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.59: 	        NotFound then v
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.60: 	        Success(r) then r
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `App[anything] & ??A` does not contain member `Abs#A`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type `Abs[anything] & ??A` does not contain member `App#A`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.136: 	module Test1 extends EvalVar, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ║        	                       ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.82: 	    if v is
//│ ║        	       ^^^^
//│ ║  l.83: 	      App(t1, t2) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	        let l1 = this.eval(sub, t1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	        let l2 = this.eval(sub, t2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	        if t1 is
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.90: 	      Abs(x, t) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.91: 	        let s = gensym()
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	    else
//│ ║        	^^^^^^^^
//│ ║  l.94: 	      super.eval(sub, v)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.82: 	    if v is
//│ ╙──      	       ^
//│ module Test1 {
//│   fun eval: (List[{_1: Str, _2: 'b}], Abs[anything] | App[anything] | Var) -> 'a
//│ }
//│ where
//│   'b :> 'a
//│   'a :> Abs['a] | App['a] | error | Var | ??A & 'b

Test1.eval(Nil(), Var("a"))
//│ 'a
//│   where
//│     'a :> Var | Abs['a] | App['a] | error

Test1.eval(Nil(), Abs("b", Var("a")))
//│ 'a
//│   where
//│     'a :> Abs['a] | App['a] | error | Var

Test1.eval(Cons(["c", Var("d")], Nil()), App(Abs("b", Var("b")), Var("c")))
//│ 'a
//│   where
//│     'a :> Abs['a] | App['a] | error | Var

Test1.eval(Cons(["c", Abs("d", Var("d"))], Nil()), App(Abs("b", Var("b")), Var("c")))
//│ 'a
//│   where
//│     'a :> Abs['a] | App['a] | error | Abs[Var] & ??A | Var

class Numb(n: Int)
class Add<out A>(l: A, r: A)
class Mul<out A>(l: A, r: A)
//│ class Numb(n: Int)
//│ class Add[A](l: A, r: A)
//│ class Mul[A](l: A, r: A)

fun map_expr(f, v) =
  if v is
    Var then v
    Numb then v
    Add(l, r) then Add(f(l), f(r))
    Mul(l, r) then Mul(f(l), f(r))
//│ fun map_expr: forall 'a 'A 'b 'A0. ((??A & 'A0) -> 'a & (??A0 & 'A) -> 'b, Add['A0] | Mul['A] | Numb | Var) -> (Add['a] | Mul['b] | Numb | Var)

mixin EvalExpr {
  fun eval(sub, v) =
    let eta(e) = this.eval(sub, e)
    let vv = map_expr(eta, v)
    if vv is
      Var then super.eval(sub, vv)
      Add(Numb(l), Numb(r)) then Numb(l + r)
      Mul(Numb(l), Numb(r)) then Numb(l * r)
    else v
}
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.387: 	    if vv is
//│ ║         	       ^^^^^
//│ ║  l.388: 	      Var then super.eval(sub, vv)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.389: 	      Add(Numb(l), Numb(r)) then Numb(l + r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.390: 	      Mul(Numb(l), Numb(r)) then Numb(l * r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.391: 	    else v
//│ ║         	^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Object`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ║         	                 ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.389: 	      Add(Numb(l), Numb(r)) then Numb(l + r)
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.390: 	      Mul(Numb(l), Numb(r)) then Numb(l * r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.391: 	    else v
//│ ║         	^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.389: 	      Add(Numb(l), Numb(r)) then Numb(l + r)
//│ ╙──       	          ^^^^^^^
//│ ╔══[ERROR] Type mismatch in operator application:
//│ ║  l.387: 	    if vv is
//│ ║         	       ^^^^^
//│ ║  l.388: 	      Var then super.eval(sub, vv)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.389: 	      Add(Numb(l), Numb(r)) then Numb(l + r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.390: 	      Mul(Numb(l), Numb(r)) then Numb(l * r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.391: 	    else v
//│ ║         	^^^^^^^^^^
//│ ╟── field selection of type `A & ?A` is not an instance of type `Object`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ║         	                 ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.389: 	      Add(Numb(l), Numb(r)) then Numb(l + r)
//│ ║         	          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.390: 	      Mul(Numb(l), Numb(r)) then Numb(l * r)
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.391: 	    else v
//│ ║         	^^^^^^^^^^^
//│ ╟── from application:
//│ ║  l.389: 	      Add(Numb(l), Numb(r)) then Numb(l + r)
//│ ╙──       	          ^^^^^^^
//│ mixin EvalExpr() {
//│   super: {eval: ('a, Var) -> 'b}
//│   this: {eval: ('a, ??A & 'A | ??A0 & 'A0) -> anything}
//│   fun eval: ('a, 'b & (Add['A] | Mul['A0] | Numb | Var)) -> (Numb | error | 'b)
//│ }

module Test2 extends EvalVar, EvalExpr
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.447: 	module Test2 extends EvalVar, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` does not match type `Add[?A] | Mul[?A0] | Numb | Var`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.447: 	module Test2 extends EvalVar, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.447: 	module Test2 extends EvalVar, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` does not match type `Add[?A0] | Mul[?A1] | Numb | Var`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.447: 	module Test2 extends EvalVar, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ module Test2 {
//│   fun eval: forall 'a. (List[{_1: Str, _2: 'b}], 'a & (Add['A] | Mul['A0] | Numb | Var)) -> (Numb | Var | error | ??A & 'b | ??A0 & 'A | ??A1 & 'A0 | 'a)
//│ }

Test2.eval(Nil(), Var("a"))
//│ Numb | Var | error

Test2.eval(Cons(["c", Abs("d", Var("d"))], Nil()), Var("a"))
//│ Abs[Var] & ??A | Numb | Var | error

Test2.eval(Cons(["a", Numb(1)], Nil()), Var("a"))
//│ Numb | Var | error

Test2.eval(Cons(["a", Abs("d", Var("d"))], Nil()), Add(Numb(1), Var("a")))
//│ Abs[Var] & ??A | Add[Numb | Var] | Numb | Var | error

module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` does not match type `Add[?A] | Mul[?A0] | Numb | Var`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `App[anything] & ??A` does not contain member `Abs#A`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type `Abs[anything] & ??A` does not contain member `App#A`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ║        	                         ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.82: 	    if v is
//│ ║        	       ^^^^
//│ ║  l.83: 	      App(t1, t2) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	        let l1 = this.eval(sub, t1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	        let l2 = this.eval(sub, t2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	        if t1 is
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.90: 	      Abs(x, t) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.91: 	        let s = gensym()
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	    else
//│ ║        	^^^^^^^^
//│ ║  l.94: 	      super.eval(sub, v)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.82: 	    if v is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` does not match type `Add[?A] | Mul[?A0] | Numb | Var`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `App[anything] & ??A` does not contain member `Abs#A`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type `Abs[anything] & ??A` does not contain member `App#A`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ║        	                         ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.82: 	    if v is
//│ ║        	       ^^^^
//│ ║  l.83: 	      App(t1, t2) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	        let l1 = this.eval(sub, t1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	        let l2 = this.eval(sub, t2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	        if t1 is
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.90: 	      Abs(x, t) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.91: 	        let s = gensym()
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	    else
//│ ║        	^^^^^^^^
//│ ║  l.94: 	      super.eval(sub, v)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.82: 	    if v is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` does not match type `Add[?A] | Mul[?A0] | Numb | Var`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `App[anything] & ??A` does not contain member `Abs#A`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type `Abs[anything] & ??A` does not contain member `App#A`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ║        	                       ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.82: 	    if v is
//│ ║        	       ^^^^
//│ ║  l.83: 	      App(t1, t2) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	        let l1 = this.eval(sub, t1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	        let l2 = this.eval(sub, t2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	        if t1 is
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.90: 	      Abs(x, t) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.91: 	        let s = gensym()
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	    else
//│ ║        	^^^^^^^^
//│ ║  l.94: 	      super.eval(sub, v)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.82: 	    if v is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` does not match type `Add[?A] | Mul[?A0] | Numb | Var`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `App[anything] & ??A` does not contain member `Abs#A`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type `Abs[anything] & ??A` does not contain member `App#A`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.82: 	    if v is
//│ ║        	       ^^^^
//│ ║  l.83: 	      App(t1, t2) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	        let l1 = this.eval(sub, t1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	        let l2 = this.eval(sub, t2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	        if t1 is
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.90: 	      Abs(x, t) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.91: 	        let s = gensym()
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	    else
//│ ║        	^^^^^^^^
//│ ║  l.94: 	      super.eval(sub, v)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.82: 	    if v is
//│ ╙──      	       ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` does not match type `Add[?A] | Mul[?A0] | Numb | Var`
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── expression of type `??A & ~#Abs & ~#App` is not an instance of type `Object`
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from wildcard pattern:
//│ ║  l.94: 	      super.eval(sub, v)
//│ ╙──      	      ^^^^^^^^^^^^^^^^^^
//│ ╔══[ERROR] Type `App[anything] & ??A` does not contain member `Abs#A`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type `Abs[anything] & ??A` does not contain member `App#A`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ╙──      	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.540: 	module Test3 extends EvalVar, EvalExpr, EvalLambda
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.82: 	    if v is
//│ ║        	       ^^^^
//│ ║  l.83: 	      App(t1, t2) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.84: 	        let l1 = this.eval(sub, t1)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.85: 	        let l2 = this.eval(sub, t2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.86: 	        if t1 is
//│ ║        	^^^^^^^^^^^^^^^^
//│ ║  l.87: 	          Abs(x, t) then this.eval(Cons([x, l2], Nil()), t)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.88: 	        else
//│ ║        	^^^^^^^^^^^^
//│ ║  l.89: 	          App(l1, l2)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.90: 	      Abs(x, t) then
//│ ║        	^^^^^^^^^^^^^^^^^^^^
//│ ║  l.91: 	        let s = gensym()
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.92: 	        Abs(s, this.eval(Cons([x, Var(s)], sub), t))
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.93: 	    else
//│ ║        	^^^^^^^^
//│ ║  l.94: 	      super.eval(sub, v)
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.82: 	    if v is
//│ ╙──      	       ^
//│ module Test3 {
//│   fun eval: (List[{_1: Str, _2: 'b}], Abs[anything] | App[anything] | 'a & (Add[anything] | Mul[anything] | Numb | Var)) -> 'c
//│ }
//│ where
//│   'b :> 'c
//│   'c :> Numb | Var | error | ??A & 'b | ??A0 & ~#Abs & ~#App | ??A1 & ~#Abs & ~#App | ??A2 & ~#Abs & ~#App | ??A3 & ~#Abs & ~#App | ??A4 & ~#Abs & ~#App | 'a | Abs['c] | App['c]

Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil()), Abs("a", Var("a")))
//│ 'a
//│   where
//│     'a :> Abs[Var] & ??A | Numb | Var | error | ??A0 & ~#Abs & ~#App | ??A1 & ~#Abs & ~#App | ??A2 & ~#Abs & ~#App | ??A3 & ~#Abs & ~#App | ??A4 & ~#Abs & ~#App | Abs['a] | App['a]

Test3.eval(Cons(["c", Abs("d", Var("d"))], Nil()), App(Abs("a", Var("a")), Add(Numb(1), Var("c"))))
//│ 'a
//│   where
//│     'a :> Abs[Var] & ??A | Numb | Var | error | ??A0 & ~#Abs & ~#App | ??A1 & ~#Abs & ~#App | ??A2 & ~#Abs & ~#App | ??A3 & ~#Abs & ~#App | ??A4 & ~#Abs & ~#App | Abs['a] | App['a]

module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` does not match type `Add[?A] | Mul[?A0] | Numb | Var`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` does not match type `Add[?A0] | Mul[?A1] | Numb | Var`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ║         	                       ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` does not match type `Add[?A0] | Mul[?A1] | Numb | Var`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ║        	                         ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ║        	                         ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` does not match type `Add[?A0] | Mul[?A1] | Numb | Var`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ║        	                         ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.66: 	class Abs<out A>(x: Str, t: A)
//│ ║        	                         ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` does not match type `Add[?A0] | Mul[?A1] | Numb | Var`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ║        	                       ^
//│ ╟── Note: constraint arises from reference:
//│ ║  l.376: 	  if v is
//│ ║         	     ^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ ╔══[ERROR] Type `??A` does not contain member `Mul#A`
//│ ║  l.370: 	class Mul<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type `??A` does not contain member `Add#A`
//│ ║  l.369: 	class Add<out A>(l: A, r: A)
//│ ╙──       	              ^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.938: 	module Test3 extends EvalVar, EvalLambda, EvalExpr
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??A & ?A` is not an instance of type `Object`
//│ ║  l.67: 	class App<out A>(s: A, t: A)
//│ ║        	                       ^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.376: 	  if v is
//│ ║         	     ^^^^
//│ ║  l.377: 	    Var then v
//│ ║         	^^^^^^^^^^^^^^
//│ ║  l.378: 	    Numb then v
//│ ║         	^^^^^^^^^^^^^^^
//│ ║  l.379: 	    Add(l, r) then Add(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.380: 	    Mul(l, r) then Mul(f(l), f(r))
//│ ║         	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.386: 	    let vv = map_expr(eta, v)
//│ ╙──       	                           ^
//│ module Test3 {
//│   fun eval: (List[{_1: Str, _2: 'b}], 'a & (Add['A] | Mul['A0] | Numb | Var)) -> (??A & ??A0 | ??A1 & 'A | ??A2 & 'A0 | 'a)
//│ }
//│ where
//│   'b :> 'a
//│   'a :> Abs['a] | App['a] | Var | error | ??A3 & 'b | ??A & ??A0 | ??A2 & (error | 'A0) | ??A1 & (error | 'A) | Numb

