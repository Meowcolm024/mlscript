:NewDefs
:NoJS


class Union[out Region](val a: Region)
// class Union[Region](a: Region)
//│ class Union[Region](a: Region)

fun go(x) = Union(go(x))
let circles = go(2)
//│ fun go: forall 'Region. anything -> 'Region
//│ let circles: forall 'Region0. 'Region0
//│ where
//│   'Region0 :> Union['Region0]
//│   'Region :> Union['Region]


fun contains(a) =
  if a is Union then contains(a.a)
//│ fun contains: forall 'Region. Union['Region] -> nothing
//│   where
//│     'Region <: Union['Region] | ~??Region

contains(circles)
//│ nothing


mixin Contains {
  fun contains(a) =
    if a is Union then this.contains(a.a)
}
//│ mixin Contains() {
//│   this: {contains: (??Region & 'Region) -> 'a}
//│   fun contains: Union['Region] -> 'a
//│ }

module TestContains extends Contains
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.37: 	module TestContains extends Contains
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??Region & ?Region` is not an instance of type `Union`
//│ ║  l.30: 	    if a is Union then this.contains(a.a)
//│ ║        	                                     ^^^
//│ ╟── Note: constraint arises from class pattern:
//│ ║  l.30: 	    if a is Union then this.contains(a.a)
//│ ║        	            ^^^^^
//│ ╟── from reference:
//│ ║  l.30: 	    if a is Union then this.contains(a.a)
//│ ╙──      	       ^
//│ ╔══[ERROR] Type `??Region` does not contain member `Union#Region`
//│ ║  l.5: 	class Union[out Region](val a: Region)
//│ ╙──     	                ^^^^^^
//│ ╔══[ERROR] Type mismatch in type declaration:
//│ ║  l.37: 	module TestContains extends Contains
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── field selection of type `??Region & ?Region` is not an instance of type `Object`
//│ ║  l.30: 	    if a is Union then this.contains(a.a)
//│ ║        	                                     ^^^
//│ ╟── Note: constraint arises from `case` expression:
//│ ║  l.30: 	    if a is Union then this.contains(a.a)
//│ ║        	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── from reference:
//│ ║  l.30: 	    if a is Union then this.contains(a.a)
//│ ╙──      	       ^
//│ module TestContains {
//│   fun contains: Union[anything] -> nothing
//│ }

TestContains.contains(circles)
//│ nothing


